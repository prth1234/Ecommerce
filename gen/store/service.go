// Code generated by goa v3.19.0, DO NOT EDIT.
//
// store service
//
// Command:
// $ goa gen store/design

package store

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Store service
type Service interface {
	// CreateUser implements createUser.
	CreateUser(context.Context, *NewUser) (res *User, err error)
	// Login a user and return a JWT token
	LoginUser(context.Context, *LoginUserPayload) (res *LoginUserResult, err error)
	// GetUser implements getUser.
	GetUser(context.Context, *GetUserPayload) (res *User, err error)
	// GetUserAll implements getUserAll.
	GetUserAll(context.Context) (res []*User, err error)
	// UpdateUser implements updateUser.
	UpdateUser(context.Context, *UserUpdatePayload) (res *User, err error)
	// DeleteUser implements deleteUser.
	DeleteUser(context.Context) (err error)
	// CreateProduct implements createProduct.
	CreateProduct(context.Context, *NewProduct) (res *Product, err error)
	// GetProduct implements getProduct.
	GetProduct(context.Context, *GetProductPayload) (res *Product, err error)
	// ListProducts implements listProducts.
	ListProducts(context.Context, *ListProductsPayload) (res []*Product, err error)
	// AddToCart implements addToCart.
	AddToCart(context.Context, *CartItem) (res *Cart, err error)
	// RemoveFromCart implements removeFromCart.
	RemoveFromCart(context.Context, *RemoveFromCartPayload) (res *Cart, err error)
	// GetCart implements getCart.
	GetCart(context.Context) (res *Cart, err error)
	// Create an order from the current cart
	CreateOrder(context.Context) (res *Order, err error)
	// Delete an order from the current cart
	DeleteOrder(context.Context, *DeleteOrderPayload) (err error)
	// GetOrder implements getOrder.
	GetOrder(context.Context, *GetOrderPayload) (res *Order, err error)
	// Retrieve all orders for the authenticated user
	GetUserOrders(context.Context) (res []*Order, err error)
	// Retrieve all products posted by the user
	GetProductsPostedByUser(context.Context) (res []*Product, err error)
	// Update the status of an order item
	UpdateOrderItemStatus(context.Context, *UpdateOrderItemStatusPayload) (res *Order, err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "store"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "store"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [18]string{"createUser", "loginUser", "getUser", "getUserAll", "updateUser", "deleteUser", "createProduct", "getProduct", "listProducts", "addToCart", "removeFromCart", "getCart", "createOrder", "deleteOrder", "getOrder", "getUserOrders", "getProductsPostedByUser", "updateOrderItemStatus"}

// Cart is the result type of the store service addToCart method.
type Cart struct {
	// Unique cart ID
	ID string
	// ID of the user who owns the cart
	UserID string
	// Items in the cart
	Items []*CartItem
	// Total amount of the cart
	TotalAmount float64
}

// CartItem is the payload type of the store service addToCart method.
type CartItem struct {
	// ID of the product
	ProductID string
	// Quantity of the product
	Quantity int
}

// DeleteOrderPayload is the payload type of the store service deleteOrder
// method.
type DeleteOrderPayload struct {
	ID string
}

// GetOrderPayload is the payload type of the store service getOrder method.
type GetOrderPayload struct {
	ID string
}

// GetProductPayload is the payload type of the store service getProduct method.
type GetProductPayload struct {
	ID string
}

// GetUserPayload is the payload type of the store service getUser method.
type GetUserPayload struct {
	ID string
}

// ListProductsPayload is the payload type of the store service listProducts
// method.
type ListProductsPayload struct {
	// Minimum price filter
	MinPrice *float32
	// Maximum price filter
	MaxPrice *float32
	// Price range filter (e.g. [min, max])
	PriceRange []float32
}

// LoginUserPayload is the payload type of the store service loginUser method.
type LoginUserPayload struct {
	// Username for login
	Username string
	// Password for login
	Password string
}

// LoginUserResult is the result type of the store service loginUser method.
type LoginUserResult struct {
	// JWT token for the authenticated user
	Token *string
}

// NewProduct is the payload type of the store service createProduct method.
type NewProduct struct {
	// Product name
	Name string
	// Product description
	Description *string
	// Product price
	Price float64
	// Available inventory
	Inventory int
}

// NewUser is the payload type of the store service createUser method.
type NewUser struct {
	// User's username
	Username string
	// User's email address
	Email string
	// User's first name
	FirstName string
	// User's last name
	LastName string
	// User's password
	Password string
}

// Order is the result type of the store service createOrder method.
type Order struct {
	// Unique order ID
	ID string
	// ID of the user who placed the order
	UserID string
	// Items in the order
	Items []*OrderItem
	// Total amount of the order
	TotalAmount float64
	// Overall status of the order
	OverallStatus string
}

type OrderItem struct {
	// ID of the product
	ProductID string
	// ID of the seller who posted this product
	SellerID string
	// Quantity of the product
	Quantity int
	// Price of the product at the time of order
	Price float64
	// Status of this specific item in the order
	Status string
}

// Product is the result type of the store service createProduct method.
type Product struct {
	// Product's owner's user ID
	UserID string
	// Unique product ID
	ID string
	// Product name
	Name string
	// Product description
	Description *string
	// Product price
	Price float64
	// Available inventory
	Inventory int
}

// RemoveFromCartPayload is the payload type of the store service
// removeFromCart method.
type RemoveFromCartPayload struct {
	ProductID string
}

// UpdateOrderItemStatusPayload is the payload type of the store service
// updateOrderItemStatus method.
type UpdateOrderItemStatusPayload struct {
	// ID of the order
	OrderID string
	// ID of the product in the order
	ProductID string
	// New status for the order item
	Status string
}

// User is the result type of the store service createUser method.
type User struct {
	// Unique user ID
	ID string
	// User's username
	Username string
	// User's email address
	Email string
	// User's first name
	FirstName *string
	// User's last name
	LastName *string
}

// UserUpdatePayload is the payload type of the store service updateUser method.
type UserUpdatePayload struct {
	// User's email address
	Email string
	// User's first name
	FirstName string
	// User's last name
	LastName string
}

// User is not authorized to update this order item
type Forbidden string

// Order or product not found
type NotFound string

// Invalid username or password
type Unauthorized string

// Error returns an error description.
func (e Forbidden) Error() string {
	return "User is not authorized to update this order item"
}

// ErrorName returns "forbidden".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e Forbidden) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "forbidden".
func (e Forbidden) GoaErrorName() string {
	return "forbidden"
}

// Error returns an error description.
func (e NotFound) Error() string {
	return "Order or product not found"
}

// ErrorName returns "not-found".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e NotFound) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "not-found".
func (e NotFound) GoaErrorName() string {
	return "not-found"
}

// Error returns an error description.
func (e Unauthorized) Error() string {
	return "Invalid username or password"
}

// ErrorName returns "unauthorized".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e Unauthorized) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "unauthorized".
func (e Unauthorized) GoaErrorName() string {
	return "unauthorized"
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not-found", false, false, false)
}
