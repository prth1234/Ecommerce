swagger: "2.0"
info:
    title: Store API
    description: Service for a complete store with users, products, carts, and orders
    version: 0.0.1
host: localhost:8000
consumes:
    - application/json
    - application/xml
    - application/gob
produces:
    - application/json
    - application/xml
    - application/gob
paths:
    /cart:
        get:
            tags:
                - store
            summary: getCart store
            operationId: store#getCart
            responses:
                "200":
                    description: OK response.
                    schema:
                        $ref: '#/definitions/Cart'
                        required:
                            - id
                            - userID
                            - items
                            - totalAmount
                "404":
                    description: Not Found response.
                    schema:
                        $ref: '#/definitions/StoreGetCartNotFoundResponseBody'
            schemes:
                - http
    /cart/item:
        post:
            tags:
                - store
            summary: addToCart store
            operationId: store#addToCart
            parameters:
                - name: AddToCartRequestBody
                  in: body
                  required: true
                  schema:
                    $ref: '#/definitions/CartItem'
                    required:
                        - productID
                        - quantity
            responses:
                "200":
                    description: OK response.
                    schema:
                        $ref: '#/definitions/Cart'
                        required:
                            - id
                            - userID
                            - items
                            - totalAmount
            schemes:
                - http
    /cart/item/{productID}:
        delete:
            tags:
                - store
            summary: removeFromCart store
            operationId: store#removeFromCart
            parameters:
                - name: productID
                  in: path
                  required: true
                  type: string
            responses:
                "200":
                    description: OK response.
                    schema:
                        $ref: '#/definitions/Cart'
                        required:
                            - id
                            - userID
                            - items
                            - totalAmount
            schemes:
                - http
    /login:
        post:
            tags:
                - store
            summary: loginUser store
            description: Login a user and return a JWT token
            operationId: store#loginUser
            parameters:
                - name: LoginUserRequestBody
                  in: body
                  required: true
                  schema:
                    $ref: '#/definitions/StoreLoginUserRequestBody'
                    required:
                        - username
                        - password
            responses:
                "200":
                    description: OK response.
                    schema:
                        $ref: '#/definitions/StoreLoginUserResponseBody'
                "401":
                    description: Unauthorized response.
                    schema:
                        type: string
            schemes:
                - http
    /orders:
        get:
            tags:
                - store
            summary: getUserOrders store
            description: Retrieve all orders for the authenticated user
            operationId: store#getUserOrders
            responses:
                "200":
                    description: OK response.
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/Order'
            schemes:
                - http
        post:
            tags:
                - store
            summary: createOrder store
            description: Create an order from the current cart
            operationId: store#createOrder
            responses:
                "201":
                    description: Created response.
                    schema:
                        $ref: '#/definitions/Order'
                        required:
                            - id
                            - userID
                            - items
                            - totalAmount
                            - status
            schemes:
                - http
    /orders/{id}:
        get:
            tags:
                - store
            summary: getOrder store
            operationId: store#getOrder
            parameters:
                - name: id
                  in: path
                  required: true
                  type: string
            responses:
                "200":
                    description: OK response.
                    schema:
                        $ref: '#/definitions/Order'
                        required:
                            - id
                            - userID
                            - items
                            - totalAmount
                            - status
                "404":
                    description: Not Found response.
                    schema:
                        $ref: '#/definitions/StoreGetOrderNotFoundResponseBody'
            schemes:
                - http
        delete:
            tags:
                - store
            summary: deleteOrder store
            description: Delete an order from the current cart
            operationId: store#deleteOrder
            parameters:
                - name: id
                  in: path
                  required: true
                  type: string
            responses:
                "200":
                    description: OK response.
            schemes:
                - http
    /products:
        get:
            tags:
                - store
            summary: listProducts store
            operationId: store#listProducts
            responses:
                "200":
                    description: OK response.
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/Product'
            schemes:
                - http
        post:
            tags:
                - store
            summary: createProduct store
            operationId: store#createProduct
            parameters:
                - name: CreateProductRequestBody
                  in: body
                  required: true
                  schema:
                    $ref: '#/definitions/NewProduct'
                    required:
                        - name
                        - price
                        - inventory
            responses:
                "201":
                    description: Created response.
                    schema:
                        $ref: '#/definitions/Product'
                        required:
                            - id
                            - name
                            - price
                            - inventory
            schemes:
                - http
    /products/{id}:
        get:
            tags:
                - store
            summary: getProduct store
            operationId: store#getProduct
            parameters:
                - name: id
                  in: path
                  required: true
                  type: string
            responses:
                "200":
                    description: OK response.
                    schema:
                        $ref: '#/definitions/Product'
                        required:
                            - id
                            - name
                            - price
                            - inventory
                "404":
                    description: Not Found response.
                    schema:
                        $ref: '#/definitions/StoreGetProductNotFoundResponseBody'
            schemes:
                - http
    /users:
        get:
            tags:
                - store
            summary: getUserAll store
            operationId: store#getUserAll
            responses:
                "200":
                    description: OK response.
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/User'
            schemes:
                - http
        post:
            tags:
                - store
            summary: createUser store
            operationId: store#createUser
            parameters:
                - name: CreateUserRequestBody
                  in: body
                  required: true
                  schema:
                    $ref: '#/definitions/NewUser'
                    required:
                        - username
                        - email
                        - firstName
                        - lastName
                        - password
            responses:
                "201":
                    description: Created response.
                    schema:
                        $ref: '#/definitions/User'
                        required:
                            - id
                            - username
                            - email
            schemes:
                - http
    /users/{id}:
        get:
            tags:
                - store
            summary: getUser store
            operationId: store#getUser
            parameters:
                - name: id
                  in: path
                  required: true
                  type: string
            responses:
                "200":
                    description: OK response.
                    schema:
                        $ref: '#/definitions/User'
                        required:
                            - id
                            - username
                            - email
                "404":
                    description: Not Found response.
                    schema:
                        $ref: '#/definitions/StoreGetUserNotFoundResponseBody'
            schemes:
                - http
    /users/delete:
        post:
            tags:
                - store
            summary: deleteUser store
            operationId: store#deleteUser
            responses:
                "200":
                    description: OK response.
            schemes:
                - http
    /users/update:
        post:
            tags:
                - store
            summary: updateUser store
            operationId: store#updateUser
            parameters:
                - name: UpdateUserRequestBody
                  in: body
                  required: true
                  schema:
                    $ref: '#/definitions/UserUpdatePayload'
                    required:
                        - email
                        - firstName
                        - lastName
            responses:
                "200":
                    description: OK response.
                    schema:
                        $ref: '#/definitions/User'
                        required:
                            - id
                            - username
                            - email
            schemes:
                - http
definitions:
    Cart:
        title: Cart
        type: object
        properties:
            id:
                type: string
                description: Unique cart ID
                example: Rerum ut voluptatum exercitationem quae.
            items:
                type: array
                items:
                    $ref: '#/definitions/CartItem'
                description: Items in the cart
                example:
                    - productID: Dicta porro debitis ut.
                      quantity: 8013862379681733256
                    - productID: Dicta porro debitis ut.
                      quantity: 8013862379681733256
                    - productID: Dicta porro debitis ut.
                      quantity: 8013862379681733256
            totalAmount:
                type: number
                description: Total amount of the cart
                example: 0.6100519064703301
                format: double
            userID:
                type: string
                description: ID of the user who owns the cart
                example: Odio enim esse autem delectus.
        example:
            id: Cum porro exercitationem eaque.
            items:
                - productID: Dicta porro debitis ut.
                  quantity: 8013862379681733256
                - productID: Dicta porro debitis ut.
                  quantity: 8013862379681733256
                - productID: Dicta porro debitis ut.
                  quantity: 8013862379681733256
            totalAmount: 0.720505802612412
            userID: Nisi sunt ut repudiandae numquam ab et.
        required:
            - id
            - userID
            - items
            - totalAmount
    CartItem:
        title: CartItem
        type: object
        properties:
            productID:
                type: string
                description: ID of the product
                example: Odio veniam voluptas fuga.
            quantity:
                type: integer
                description: Quantity of the product
                example: 2517417132641930953
                format: int64
        example:
            productID: Autem in voluptas atque iste.
            quantity: 7061689154653394713
        required:
            - productID
            - quantity
    NewProduct:
        title: NewProduct
        type: object
        properties:
            description:
                type: string
                description: Product description
                example: Necessitatibus natus voluptas culpa nesciunt.
            inventory:
                type: integer
                description: Available inventory
                example: 6506620229719111063
                format: int64
            name:
                type: string
                description: Product name
                example: Dolor facilis non quaerat necessitatibus itaque quo.
            price:
                type: number
                description: Product price
                example: 0.6798849168387702
                format: double
        example:
            description: Esse sed aut et perspiciatis sit dolorem.
            inventory: 5491949124356088522
            name: Quas aut dolorem.
            price: 0.32937112336048535
        required:
            - name
            - price
            - inventory
    NewUser:
        title: NewUser
        type: object
        properties:
            email:
                type: string
                description: User's email address
                example: Consequatur cumque.
            firstName:
                type: string
                description: User's first name
                example: Sint et ut quo.
            lastName:
                type: string
                description: User's last name
                example: Vero omnis quo reiciendis vitae.
            password:
                type: string
                description: User's password
                example: Quod aut et.
            username:
                type: string
                description: User's username
                example: Sed sit nesciunt odit perferendis.
        example:
            email: Et dolorem et.
            firstName: Porro dolores aperiam reiciendis provident quasi.
            lastName: Voluptatem rerum temporibus dolor cupiditate id.
            password: Odio ipsam et quas.
            username: Quo iusto itaque dolorem.
        required:
            - username
            - email
            - firstName
            - lastName
            - password
    Order:
        title: Order
        type: object
        properties:
            id:
                type: string
                description: Unique order ID
                example: Ut porro sit facilis tempore eligendi.
            items:
                type: array
                items:
                    $ref: '#/definitions/OrderItem'
                description: Items in the order
                example:
                    - price: 0.22480366432526314
                      productID: Eveniet ut.
                      quantity: 4089240456711199324
                    - price: 0.22480366432526314
                      productID: Eveniet ut.
                      quantity: 4089240456711199324
                    - price: 0.22480366432526314
                      productID: Eveniet ut.
                      quantity: 4089240456711199324
                    - price: 0.22480366432526314
                      productID: Eveniet ut.
                      quantity: 4089240456711199324
            status:
                type: string
                description: Order status
                example: Ab accusantium accusantium nisi sed qui ut.
            totalAmount:
                type: number
                description: Total amount of the order
                example: 0.6321124715798305
                format: double
            userID:
                type: string
                description: ID of the user who placed the order
                example: Et velit eos rerum veniam est.
        example:
            id: Atque esse et velit ipsa earum.
            items:
                - price: 0.22480366432526314
                  productID: Eveniet ut.
                  quantity: 4089240456711199324
                - price: 0.22480366432526314
                  productID: Eveniet ut.
                  quantity: 4089240456711199324
                - price: 0.22480366432526314
                  productID: Eveniet ut.
                  quantity: 4089240456711199324
            status: Quo qui vel laborum amet dolor eius.
            totalAmount: 0.6082956058978668
            userID: Beatae soluta id ab adipisci in.
        required:
            - id
            - userID
            - items
            - totalAmount
            - status
    OrderItem:
        title: OrderItem
        type: object
        properties:
            price:
                type: number
                description: Price of the product at the time of order
                example: 0.9938097264157466
                format: double
            productID:
                type: string
                description: ID of the product
                example: Rem suscipit placeat.
            quantity:
                type: integer
                description: Quantity of the product
                example: 5064475974842167136
                format: int64
        example:
            price: 0.8369890430400933
            productID: Excepturi reiciendis tenetur officiis.
            quantity: 4975547334164628630
        required:
            - productID
            - quantity
            - price
    Product:
        title: Product
        type: object
        properties:
            description:
                type: string
                description: Product description
                example: Aliquam libero sunt qui.
            id:
                type: string
                description: Unique product ID
                example: Sed laboriosam.
            inventory:
                type: integer
                description: Available inventory
                example: 6087397439069989082
                format: int64
            name:
                type: string
                description: Product name
                example: Velit recusandae temporibus eos dolorem voluptas.
            price:
                type: number
                description: Product price
                example: 0.9192913046231569
                format: double
        example:
            description: Incidunt distinctio ipsam minus sequi.
            id: Ratione et et deserunt.
            inventory: 1633112326873757702
            name: Nesciunt laudantium delectus a.
            price: 0.4264972449155055
        required:
            - id
            - name
            - price
            - inventory
    StoreGetCartNotFoundResponseBody:
        title: 'Mediatype identifier: application/vnd.goa.error; view=default'
        type: object
        properties:
            fault:
                type: boolean
                description: Is the error a server-side fault?
                example: false
            id:
                type: string
                description: ID is a unique identifier for this particular occurrence of the problem.
                example: 123abc
            message:
                type: string
                description: Message is a human-readable explanation specific to this occurrence of the problem.
                example: parameter 'p' must be an integer
            name:
                type: string
                description: Name is the name of this class of errors.
                example: bad_request
            temporary:
                type: boolean
                description: Is the error temporary?
                example: false
            timeout:
                type: boolean
                description: Is the error a timeout?
                example: true
        description: getCart_not-found_response_body result type (default view)
        example:
            fault: true
            id: 123abc
            message: parameter 'p' must be an integer
            name: bad_request
            temporary: true
            timeout: true
        required:
            - name
            - id
            - message
            - temporary
            - timeout
            - fault
    StoreGetOrderNotFoundResponseBody:
        title: 'Mediatype identifier: application/vnd.goa.error; view=default'
        type: object
        properties:
            fault:
                type: boolean
                description: Is the error a server-side fault?
                example: true
            id:
                type: string
                description: ID is a unique identifier for this particular occurrence of the problem.
                example: 123abc
            message:
                type: string
                description: Message is a human-readable explanation specific to this occurrence of the problem.
                example: parameter 'p' must be an integer
            name:
                type: string
                description: Name is the name of this class of errors.
                example: bad_request
            temporary:
                type: boolean
                description: Is the error temporary?
                example: true
            timeout:
                type: boolean
                description: Is the error a timeout?
                example: true
        description: getOrder_not-found_response_body result type (default view)
        example:
            fault: false
            id: 123abc
            message: parameter 'p' must be an integer
            name: bad_request
            temporary: true
            timeout: false
        required:
            - name
            - id
            - message
            - temporary
            - timeout
            - fault
    StoreGetProductNotFoundResponseBody:
        title: 'Mediatype identifier: application/vnd.goa.error; view=default'
        type: object
        properties:
            fault:
                type: boolean
                description: Is the error a server-side fault?
                example: false
            id:
                type: string
                description: ID is a unique identifier for this particular occurrence of the problem.
                example: 123abc
            message:
                type: string
                description: Message is a human-readable explanation specific to this occurrence of the problem.
                example: parameter 'p' must be an integer
            name:
                type: string
                description: Name is the name of this class of errors.
                example: bad_request
            temporary:
                type: boolean
                description: Is the error temporary?
                example: true
            timeout:
                type: boolean
                description: Is the error a timeout?
                example: true
        description: getProduct_not-found_response_body result type (default view)
        example:
            fault: false
            id: 123abc
            message: parameter 'p' must be an integer
            name: bad_request
            temporary: true
            timeout: false
        required:
            - name
            - id
            - message
            - temporary
            - timeout
            - fault
    StoreGetUserNotFoundResponseBody:
        title: 'Mediatype identifier: application/vnd.goa.error; view=default'
        type: object
        properties:
            fault:
                type: boolean
                description: Is the error a server-side fault?
                example: true
            id:
                type: string
                description: ID is a unique identifier for this particular occurrence of the problem.
                example: 123abc
            message:
                type: string
                description: Message is a human-readable explanation specific to this occurrence of the problem.
                example: parameter 'p' must be an integer
            name:
                type: string
                description: Name is the name of this class of errors.
                example: bad_request
            temporary:
                type: boolean
                description: Is the error temporary?
                example: false
            timeout:
                type: boolean
                description: Is the error a timeout?
                example: true
        description: getUser_not-found_response_body result type (default view)
        example:
            fault: false
            id: 123abc
            message: parameter 'p' must be an integer
            name: bad_request
            temporary: true
            timeout: false
        required:
            - name
            - id
            - message
            - temporary
            - timeout
            - fault
    StoreLoginUserRequestBody:
        title: StoreLoginUserRequestBody
        type: object
        properties:
            password:
                type: string
                description: Password for login
                example: Rem dolorum.
            username:
                type: string
                description: Username for login
                example: Autem iste aut ipsa tempore.
        example:
            password: Placeat ut est quod molestias dolorem.
            username: Magnam omnis.
        required:
            - username
            - password
    StoreLoginUserResponseBody:
        title: StoreLoginUserResponseBody
        type: object
        properties:
            token:
                type: string
                description: JWT token for the authenticated user
                example: Debitis est.
        example:
            token: Libero dolores eum in magni provident sapiente.
    User:
        title: User
        type: object
        properties:
            email:
                type: string
                description: User's email address
                example: Voluptas aliquid unde explicabo.
            firstName:
                type: string
                description: User's first name
                example: Recusandae soluta voluptatibus tempore quo perspiciatis ullam.
            id:
                type: string
                description: Unique user ID
                example: Fugit animi unde ab quo.
            lastName:
                type: string
                description: User's last name
                example: Animi non.
            username:
                type: string
                description: User's username
                example: Consequatur quisquam fuga beatae dolor.
        example:
            email: Omnis quidem alias et earum itaque tempore.
            firstName: Commodi laudantium.
            id: Eum id error aspernatur esse hic placeat.
            lastName: Magni nobis dolore voluptate dolorem blanditiis.
            username: Reprehenderit amet ex accusamus.
        required:
            - id
            - username
            - email
    UserUpdatePayload:
        title: UserUpdatePayload
        type: object
        properties:
            email:
                type: string
                description: User's email address
                example: Iure et labore omnis.
            firstName:
                type: string
                description: User's first name
                example: Nisi eum adipisci quia enim.
            lastName:
                type: string
                description: User's last name
                example: Dolor praesentium.
        example:
            email: Delectus non at suscipit et officiis omnis.
            firstName: Placeat ut ut.
            lastName: Voluptatem rerum ipsam numquam.
        required:
            - email
            - firstName
            - lastName
