swagger: "2.0"
info:
    title: Store API
    description: Service for a complete store with users, products, orders, and cart functionality
    version: 0.0.1
host: localhost:8000
consumes:
    - application/json
    - application/xml
    - application/gob
produces:
    - application/json
    - application/xml
    - application/gob
paths:
    /cart:
        get:
            tags:
                - store
            summary: getCart store
            operationId: store#getCart
            parameters:
                - name: GetCartRequestBody
                  in: body
                  required: true
                  schema:
                    $ref: '#/definitions/GetCartPayload'
                    required:
                        - userID
            responses:
                "200":
                    description: OK response.
                    schema:
                        $ref: '#/definitions/Cart'
                        required:
                            - id
                            - userID
                            - items
                            - totalAmount
                "404":
                    description: Not Found response.
                    schema:
                        $ref: '#/definitions/StoreGetCartNotFoundResponseBody'
            schemes:
                - http
    /cart/items:
        post:
            tags:
                - store
            summary: addToCart store
            operationId: store#addToCart
            parameters:
                - name: AddToCartRequestBody
                  in: body
                  required: true
                  schema:
                    $ref: '#/definitions/CartItem'
                    required:
                        - userID
                        - productID
                        - quantity
            responses:
                "200":
                    description: OK response.
                    schema:
                        $ref: '#/definitions/Cart'
                        required:
                            - id
                            - userID
                            - items
                            - totalAmount
            schemes:
                - http
    /login:
        post:
            tags:
                - store
            summary: loginUser store
            description: Login a user and return a JWT token
            operationId: store#loginUser
            parameters:
                - name: LoginUserRequestBody
                  in: body
                  required: true
                  schema:
                    $ref: '#/definitions/StoreLoginUserRequestBody'
                    required:
                        - username
                        - password
            responses:
                "200":
                    description: OK response.
                    schema:
                        $ref: '#/definitions/StoreLoginUserResponseBody'
                "401":
                    description: Unauthorized response.
                    schema:
                        type: string
            schemes:
                - http
    /orders:
        post:
            tags:
                - store
            summary: createOrder store
            operationId: store#createOrder
            parameters:
                - name: CreateOrderRequestBody
                  in: body
                  required: true
                  schema:
                    $ref: '#/definitions/NewOrder'
                    required:
                        - items
            responses:
                "201":
                    description: Created response.
                    schema:
                        $ref: '#/definitions/Order'
                        required:
                            - id
                            - userID
                            - items
                            - totalAmount
                            - status
            schemes:
                - http
    /orders/{id}:
        get:
            tags:
                - store
            summary: getOrder store
            operationId: store#getOrder
            parameters:
                - name: id
                  in: path
                  required: true
                  type: string
            responses:
                "200":
                    description: OK response.
                    schema:
                        $ref: '#/definitions/Order'
                        required:
                            - id
                            - userID
                            - items
                            - totalAmount
                            - status
                "404":
                    description: Not Found response.
                    schema:
                        $ref: '#/definitions/StoreGetOrderNotFoundResponseBody'
            schemes:
                - http
    /products:
        get:
            tags:
                - store
            summary: listProducts store
            operationId: store#listProducts
            responses:
                "200":
                    description: OK response.
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/Product'
            schemes:
                - http
        post:
            tags:
                - store
            summary: createProduct store
            operationId: store#createProduct
            parameters:
                - name: CreateProductRequestBody
                  in: body
                  required: true
                  schema:
                    $ref: '#/definitions/NewProduct'
                    required:
                        - name
                        - price
                        - inventory
            responses:
                "201":
                    description: Created response.
                    schema:
                        $ref: '#/definitions/Product'
                        required:
                            - id
                            - name
                            - price
                            - inventory
            schemes:
                - http
    /products/{id}:
        get:
            tags:
                - store
            summary: getProduct store
            operationId: store#getProduct
            parameters:
                - name: id
                  in: path
                  required: true
                  type: string
            responses:
                "200":
                    description: OK response.
                    schema:
                        $ref: '#/definitions/Product'
                        required:
                            - id
                            - name
                            - price
                            - inventory
                "404":
                    description: Not Found response.
                    schema:
                        $ref: '#/definitions/StoreGetProductNotFoundResponseBody'
            schemes:
                - http
    /users:
        get:
            tags:
                - store
            summary: getUserAll store
            operationId: store#getUserAll
            responses:
                "200":
                    description: OK response.
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/User'
            schemes:
                - http
        post:
            tags:
                - store
            summary: createUser store
            operationId: store#createUser
            parameters:
                - name: CreateUserRequestBody
                  in: body
                  required: true
                  schema:
                    $ref: '#/definitions/NewUser'
                    required:
                        - username
                        - email
                        - firstName
                        - lastName
                        - password
            responses:
                "201":
                    description: Created response.
                    schema:
                        $ref: '#/definitions/User'
                        required:
                            - id
                            - username
                            - email
            schemes:
                - http
    /users/{id}:
        get:
            tags:
                - store
            summary: getUser store
            operationId: store#getUser
            parameters:
                - name: id
                  in: path
                  required: true
                  type: string
            responses:
                "200":
                    description: OK response.
                    schema:
                        $ref: '#/definitions/User'
                        required:
                            - id
                            - username
                            - email
                "404":
                    description: Not Found response.
                    schema:
                        $ref: '#/definitions/StoreGetUserNotFoundResponseBody'
            schemes:
                - http
    /users/{userID}/orders:
        get:
            tags:
                - store
            summary: getUserOrders store
            description: Retrieve all orders for a specific user
            operationId: store#getUserOrders
            parameters:
                - name: userID
                  in: path
                  required: true
                  type: string
            responses:
                "200":
                    description: OK response.
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/Order'
                "404":
                    description: Not Found response.
                    schema:
                        $ref: '#/definitions/StoreGetUserOrdersNotFoundResponseBody'
            schemes:
                - http
    /users/update:
        post:
            tags:
                - store
            summary: updateUser store
            operationId: store#updateUser
            parameters:
                - name: UpdateUserRequestBody
                  in: body
                  required: true
                  schema:
                    $ref: '#/definitions/UserUpdatePayload'
                    required:
                        - email
                        - firstName
                        - lastName
            responses:
                "200":
                    description: OK response.
                    schema:
                        $ref: '#/definitions/User'
                        required:
                            - id
                            - username
                            - email
            schemes:
                - http
definitions:
    Cart:
        title: Cart
        type: object
        properties:
            id:
                type: string
                description: Unique cart ID
                example: Architecto ut.
            items:
                type: array
                items:
                    $ref: '#/definitions/CartItem'
                description: Items in the cart
                example:
                    - price: 0.048702174109283375
                      productID: Ullam occaecati animi non hic.
                      quantity: 8636585270893183368
                      userID: Voluptatibus tempore quo.
                    - price: 0.048702174109283375
                      productID: Ullam occaecati animi non hic.
                      quantity: 8636585270893183368
                      userID: Voluptatibus tempore quo.
                    - price: 0.048702174109283375
                      productID: Ullam occaecati animi non hic.
                      quantity: 8636585270893183368
                      userID: Voluptatibus tempore quo.
                    - price: 0.048702174109283375
                      productID: Ullam occaecati animi non hic.
                      quantity: 8636585270893183368
                      userID: Voluptatibus tempore quo.
            totalAmount:
                type: number
                description: Total amount of items in the cart
                example: 0.28073880387275085
                format: double
            userID:
                type: string
                description: ID of the user who owns the cart
                example: Totam corporis ut magnam aperiam.
        example:
            id: Velit culpa id.
            items:
                - price: 0.048702174109283375
                  productID: Ullam occaecati animi non hic.
                  quantity: 8636585270893183368
                  userID: Voluptatibus tempore quo.
                - price: 0.048702174109283375
                  productID: Ullam occaecati animi non hic.
                  quantity: 8636585270893183368
                  userID: Voluptatibus tempore quo.
                - price: 0.048702174109283375
                  productID: Ullam occaecati animi non hic.
                  quantity: 8636585270893183368
                  userID: Voluptatibus tempore quo.
            totalAmount: 0.2765437023239656
            userID: Nostrum voluptatem voluptas soluta repudiandae qui.
        required:
            - id
            - userID
            - items
            - totalAmount
    CartItem:
        title: CartItem
        type: object
        properties:
            price:
                type: number
                description: Price of the product
                example: 0.013698350135625887
                format: double
            productID:
                type: string
                description: ID of the product
                example: Aperiam sed cupiditate necessitatibus exercitationem harum sunt.
            quantity:
                type: integer
                description: Quantity of the product
                example: 2766429803409412683
                format: int64
            userID:
                type: string
                description: ID of the user who owns the cart
                example: Quia aut et repudiandae.
        example:
            price: 0.4909866691492353
            productID: Similique eaque pariatur.
            quantity: 9065699124002398151
            userID: Fuga ratione voluptas voluptatem iure.
        required:
            - userID
            - productID
            - quantity
    GetCartPayload:
        title: GetCartPayload
        type: object
        properties:
            userID:
                type: string
                description: ID of the user whose cart to retrieve
                example: Quasi reiciendis ab illum.
        example:
            userID: Odit officiis aut non iste cupiditate ducimus.
        required:
            - userID
    NewOrder:
        title: NewOrder
        type: object
        properties:
            items:
                type: array
                items:
                    $ref: '#/definitions/OrderItem'
                description: Items in the order
                example:
                    - price: 0.3823852716922111
                      productID: Doloribus nulla consequuntur officia beatae laudantium.
                      quantity: 6492112474321122596
                    - price: 0.3823852716922111
                      productID: Doloribus nulla consequuntur officia beatae laudantium.
                      quantity: 6492112474321122596
                    - price: 0.3823852716922111
                      productID: Doloribus nulla consequuntur officia beatae laudantium.
                      quantity: 6492112474321122596
                    - price: 0.3823852716922111
                      productID: Doloribus nulla consequuntur officia beatae laudantium.
                      quantity: 6492112474321122596
        example:
            items:
                - price: 0.3823852716922111
                  productID: Doloribus nulla consequuntur officia beatae laudantium.
                  quantity: 6492112474321122596
                - price: 0.3823852716922111
                  productID: Doloribus nulla consequuntur officia beatae laudantium.
                  quantity: 6492112474321122596
                - price: 0.3823852716922111
                  productID: Doloribus nulla consequuntur officia beatae laudantium.
                  quantity: 6492112474321122596
        required:
            - items
    NewProduct:
        title: NewProduct
        type: object
        properties:
            description:
                type: string
                description: Product description
                example: Ab et libero provident.
            inventory:
                type: integer
                description: Available inventory
                example: 7224753904948193560
                format: int64
            name:
                type: string
                description: Product name
                example: Sunt ut repudiandae.
            price:
                type: number
                description: Product price
                example: 0.8844606459196779
                format: double
        example:
            description: Sit facilis tempore eligendi beatae et.
            inventory: 7130719941115318634
            name: Velit similique dolorum fugit ut.
            price: 0.4431488669129803
        required:
            - name
            - price
            - inventory
    NewUser:
        title: NewUser
        type: object
        properties:
            email:
                type: string
                description: User's email address
                example: Magnam omnis.
            firstName:
                type: string
                description: User's first name
                example: Placeat ut est quod molestias dolorem.
            lastName:
                type: string
                description: User's last name
                example: Autem in libero et inventore.
            password:
                type: string
                description: User's password
                example: Iure et labore omnis.
            username:
                type: string
                description: User's username
                example: Rem dolorum.
        example:
            email: Dolor praesentium.
            firstName: Delectus non at suscipit et officiis omnis.
            lastName: Placeat ut ut.
            password: Voluptatem rerum ipsam numquam.
            username: Nisi eum adipisci quia enim.
        required:
            - username
            - email
            - firstName
            - lastName
            - password
    Order:
        title: Order
        type: object
        properties:
            id:
                type: string
                description: Unique order ID
                example: Numquam est aut excepturi reiciendis.
            items:
                type: array
                items:
                    $ref: '#/definitions/OrderItem'
                description: Items in the order
                example:
                    - price: 0.4031099695493406
                      productID: Id doloribus amet.
                      quantity: 8954758678043437516
                    - price: 0.4031099695493406
                      productID: Id doloribus amet.
                      quantity: 8954758678043437516
                    - price: 0.4031099695493406
                      productID: Id doloribus amet.
                      quantity: 8954758678043437516
            status:
                type: string
                description: Order status
                example: Et velit ipsa earum natus beatae.
            totalAmount:
                type: number
                description: Total amount of the order
                example: 0.13008734274954406
                format: double
            userID:
                type: string
                description: ID of the user who placed the order
                example: Officiis aliquid.
        example:
            id: Id ab adipisci.
            items:
                - price: 0.4031099695493406
                  productID: Id doloribus amet.
                  quantity: 8954758678043437516
                - price: 0.4031099695493406
                  productID: Id doloribus amet.
                  quantity: 8954758678043437516
                - price: 0.4031099695493406
                  productID: Id doloribus amet.
                  quantity: 8954758678043437516
            status: Vel quia.
            totalAmount: 0.7597892745589203
            userID: Nihil veniam in quo qui vel laborum.
        required:
            - id
            - userID
            - items
            - totalAmount
            - status
    OrderItem:
        title: OrderItem
        type: object
        properties:
            price:
                type: number
                description: Price of the product at the time of order
                example: 0.9465471723882013
                format: double
            productID:
                type: string
                description: ID of the product
                example: Unde incidunt maxime.
            quantity:
                type: integer
                description: Quantity of the product
                example: 479991329559556715
                format: int64
        example:
            price: 0.8394698880819121
            productID: Nisi sed.
            quantity: 2967839708275597540
        required:
            - productID
            - quantity
            - price
    Product:
        title: Product
        type: object
        properties:
            description:
                type: string
                description: Product description
                example: Enim esse autem delectus autem odio.
            id:
                type: string
                description: Unique product ID
                example: Sapiente totam totam reprehenderit quidem et veritatis.
            inventory:
                type: integer
                description: Available inventory
                example: 4743706669699731629
                format: int64
            name:
                type: string
                description: Product name
                example: Non rerum ut voluptatum exercitationem quae culpa.
            price:
                type: number
                description: Product price
                example: 0.8325570908616844
                format: double
        example:
            description: Porro exercitationem.
            id: Dolor nostrum autem in.
            inventory: 5917644507686827250
            name: Atque iste sit adipisci vel quis.
            price: 0.2948034078794382
        required:
            - id
            - name
            - price
            - inventory
    StoreGetCartNotFoundResponseBody:
        title: 'Mediatype identifier: application/vnd.goa.error; view=default'
        type: object
        properties:
            fault:
                type: boolean
                description: Is the error a server-side fault?
                example: false
            id:
                type: string
                description: ID is a unique identifier for this particular occurrence of the problem.
                example: 123abc
            message:
                type: string
                description: Message is a human-readable explanation specific to this occurrence of the problem.
                example: parameter 'p' must be an integer
            name:
                type: string
                description: Name is the name of this class of errors.
                example: bad_request
            temporary:
                type: boolean
                description: Is the error temporary?
                example: false
            timeout:
                type: boolean
                description: Is the error a timeout?
                example: true
        description: getCart_not-found_response_body result type (default view)
        example:
            fault: false
            id: 123abc
            message: parameter 'p' must be an integer
            name: bad_request
            temporary: false
            timeout: true
        required:
            - name
            - id
            - message
            - temporary
            - timeout
            - fault
    StoreGetOrderNotFoundResponseBody:
        title: 'Mediatype identifier: application/vnd.goa.error; view=default'
        type: object
        properties:
            fault:
                type: boolean
                description: Is the error a server-side fault?
                example: false
            id:
                type: string
                description: ID is a unique identifier for this particular occurrence of the problem.
                example: 123abc
            message:
                type: string
                description: Message is a human-readable explanation specific to this occurrence of the problem.
                example: parameter 'p' must be an integer
            name:
                type: string
                description: Name is the name of this class of errors.
                example: bad_request
            temporary:
                type: boolean
                description: Is the error temporary?
                example: false
            timeout:
                type: boolean
                description: Is the error a timeout?
                example: false
        description: getOrder_not-found_response_body result type (default view)
        example:
            fault: true
            id: 123abc
            message: parameter 'p' must be an integer
            name: bad_request
            temporary: false
            timeout: true
        required:
            - name
            - id
            - message
            - temporary
            - timeout
            - fault
    StoreGetProductNotFoundResponseBody:
        title: 'Mediatype identifier: application/vnd.goa.error; view=default'
        type: object
        properties:
            fault:
                type: boolean
                description: Is the error a server-side fault?
                example: false
            id:
                type: string
                description: ID is a unique identifier for this particular occurrence of the problem.
                example: 123abc
            message:
                type: string
                description: Message is a human-readable explanation specific to this occurrence of the problem.
                example: parameter 'p' must be an integer
            name:
                type: string
                description: Name is the name of this class of errors.
                example: bad_request
            temporary:
                type: boolean
                description: Is the error temporary?
                example: true
            timeout:
                type: boolean
                description: Is the error a timeout?
                example: false
        description: getProduct_not-found_response_body result type (default view)
        example:
            fault: true
            id: 123abc
            message: parameter 'p' must be an integer
            name: bad_request
            temporary: false
            timeout: true
        required:
            - name
            - id
            - message
            - temporary
            - timeout
            - fault
    StoreGetUserNotFoundResponseBody:
        title: 'Mediatype identifier: application/vnd.goa.error; view=default'
        type: object
        properties:
            fault:
                type: boolean
                description: Is the error a server-side fault?
                example: true
            id:
                type: string
                description: ID is a unique identifier for this particular occurrence of the problem.
                example: 123abc
            message:
                type: string
                description: Message is a human-readable explanation specific to this occurrence of the problem.
                example: parameter 'p' must be an integer
            name:
                type: string
                description: Name is the name of this class of errors.
                example: bad_request
            temporary:
                type: boolean
                description: Is the error temporary?
                example: true
            timeout:
                type: boolean
                description: Is the error a timeout?
                example: false
        description: getUser_not-found_response_body result type (default view)
        example:
            fault: true
            id: 123abc
            message: parameter 'p' must be an integer
            name: bad_request
            temporary: false
            timeout: true
        required:
            - name
            - id
            - message
            - temporary
            - timeout
            - fault
    StoreGetUserOrdersNotFoundResponseBody:
        title: 'Mediatype identifier: application/vnd.goa.error; view=default'
        type: object
        properties:
            fault:
                type: boolean
                description: Is the error a server-side fault?
                example: false
            id:
                type: string
                description: ID is a unique identifier for this particular occurrence of the problem.
                example: 123abc
            message:
                type: string
                description: Message is a human-readable explanation specific to this occurrence of the problem.
                example: parameter 'p' must be an integer
            name:
                type: string
                description: Name is the name of this class of errors.
                example: bad_request
            temporary:
                type: boolean
                description: Is the error temporary?
                example: false
            timeout:
                type: boolean
                description: Is the error a timeout?
                example: false
        description: getUserOrders_not-found_response_body result type (default view)
        example:
            fault: true
            id: 123abc
            message: parameter 'p' must be an integer
            name: bad_request
            temporary: true
            timeout: true
        required:
            - name
            - id
            - message
            - temporary
            - timeout
            - fault
    StoreLoginUserRequestBody:
        title: StoreLoginUserRequestBody
        type: object
        properties:
            password:
                type: string
                description: Password for login
                example: Ab autem.
            username:
                type: string
                description: Username for login
                example: Aliquam libero sunt qui.
        example:
            password: Aut nesciunt.
            username: Et et.
        required:
            - username
            - password
    StoreLoginUserResponseBody:
        title: StoreLoginUserResponseBody
        type: object
        properties:
            token:
                type: string
                description: JWT token for the authenticated user
                example: Sed laboriosam.
        example:
            token: Velit recusandae temporibus eos dolorem voluptas.
    User:
        title: User
        type: object
        properties:
            email:
                type: string
                description: User's email address
                example: Quo reiciendis vitae laudantium quod.
            firstName:
                type: string
                description: User's first name
                example: Et ut.
            id:
                type: string
                description: Unique user ID
                example: Cumque possimus sint.
            lastName:
                type: string
                description: User's last name
                example: Iusto itaque.
            password:
                type: string
                description: User's password
                example: Rerum et dolorem et asperiores porro dolores.
            username:
                type: string
                description: User's username
                example: Ut quo nostrum vero.
        example:
            email: Odit odio ipsam et quas.
            firstName: Debitis est.
            id: Reiciendis provident quasi voluptates.
            lastName: Libero dolores eum in magni provident sapiente.
            password: Autem iste aut ipsa tempore.
            username: Rerum temporibus dolor cupiditate.
        required:
            - id
            - username
            - email
    UserUpdatePayload:
        title: UserUpdatePayload
        type: object
        properties:
            email:
                type: string
                description: User's email address
                example: Minus sequi fuga et quia.
            firstName:
                type: string
                description: User's first name
                example: Facilis non quaerat necessitatibus.
            lastName:
                type: string
                description: User's last name
                example: Quo molestias necessitatibus natus.
        example:
            email: Culpa nesciunt qui cumque natus.
            firstName: Aut dolorem distinctio esse.
            lastName: Aut et perspiciatis sit.
        required:
            - email
            - firstName
            - lastName
