swagger: "2.0"
info:
    title: Store API
    description: Service for a complete store with users, products, carts, and orders
    version: 0.0.1
host: localhost:8000
consumes:
    - application/json
    - application/xml
    - application/gob
produces:
    - application/json
    - application/xml
    - application/gob
paths:
    /cart:
        get:
            tags:
                - store
            summary: getCart store
            operationId: store#getCart
            responses:
                "200":
                    description: OK response.
                    schema:
                        $ref: '#/definitions/Cart'
                        required:
                            - id
                            - userID
                            - items
                            - totalAmount
                "404":
                    description: Not Found response.
                    schema:
                        $ref: '#/definitions/StoreGetCartNotFoundResponseBody'
            schemes:
                - http
    /cart/item:
        post:
            tags:
                - store
            summary: addToCart store
            operationId: store#addToCart
            parameters:
                - name: AddToCartRequestBody
                  in: body
                  required: true
                  schema:
                    $ref: '#/definitions/CartItem'
                    required:
                        - productID
                        - quantity
            responses:
                "200":
                    description: OK response.
                    schema:
                        $ref: '#/definitions/Cart'
                        required:
                            - id
                            - userID
                            - items
                            - totalAmount
            schemes:
                - http
    /cart/item/{productID}:
        delete:
            tags:
                - store
            summary: removeFromCart store
            operationId: store#removeFromCart
            parameters:
                - name: productID
                  in: path
                  required: true
                  type: string
            responses:
                "200":
                    description: OK response.
                    schema:
                        $ref: '#/definitions/Cart'
                        required:
                            - id
                            - userID
                            - items
                            - totalAmount
            schemes:
                - http
    /login:
        post:
            tags:
                - store
            summary: loginUser store
            description: Login a user and return a JWT token
            operationId: store#loginUser
            parameters:
                - name: LoginUserRequestBody
                  in: body
                  required: true
                  schema:
                    $ref: '#/definitions/StoreLoginUserRequestBody'
                    required:
                        - username
                        - password
            responses:
                "200":
                    description: OK response.
                    schema:
                        $ref: '#/definitions/StoreLoginUserResponseBody'
                "401":
                    description: Unauthorized response.
                    schema:
                        type: string
            schemes:
                - http
    /orders:
        get:
            tags:
                - store
            summary: getUserOrders store
            description: Retrieve all orders for the authenticated user
            operationId: store#getUserOrders
            responses:
                "200":
                    description: OK response.
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/Order'
            schemes:
                - http
        post:
            tags:
                - store
            summary: createOrder store
            description: Create an order from the current cart
            operationId: store#createOrder
            responses:
                "201":
                    description: Created response.
                    schema:
                        $ref: '#/definitions/Order'
                        required:
                            - id
                            - userID
                            - items
                            - totalAmount
                            - overallStatus
            schemes:
                - http
    /orders/{id}:
        get:
            tags:
                - store
            summary: getOrder store
            operationId: store#getOrder
            parameters:
                - name: id
                  in: path
                  required: true
                  type: string
            responses:
                "200":
                    description: OK response.
                    schema:
                        $ref: '#/definitions/Order'
                        required:
                            - id
                            - userID
                            - items
                            - totalAmount
                            - overallStatus
                "404":
                    description: Not Found response.
                    schema:
                        $ref: '#/definitions/StoreGetOrderNotFoundResponseBody'
            schemes:
                - http
        delete:
            tags:
                - store
            summary: deleteOrder store
            description: Delete an order from the current cart
            operationId: store#deleteOrder
            parameters:
                - name: id
                  in: path
                  required: true
                  type: string
            responses:
                "200":
                    description: OK response.
            schemes:
                - http
    /orders/{orderID}/items/{productID}:
        patch:
            tags:
                - store
            summary: updateOrderItemStatus store
            description: Update the status of an order item
            operationId: store#updateOrderItemStatus
            parameters:
                - name: orderID
                  in: path
                  description: ID of the order
                  required: true
                  type: string
                - name: productID
                  in: path
                  description: ID of the product in the order
                  required: true
                  type: string
                - name: UpdateOrderItemStatusRequestBody
                  in: body
                  required: true
                  schema:
                    $ref: '#/definitions/StoreUpdateOrderItemStatusRequestBody'
                    required:
                        - status
            responses:
                "200":
                    description: OK response.
                    schema:
                        $ref: '#/definitions/Order'
                        required:
                            - id
                            - userID
                            - items
                            - totalAmount
                            - overallStatus
                "403":
                    description: Forbidden response.
                    schema:
                        type: string
                "404":
                    description: Not Found response.
                    schema:
                        type: string
            schemes:
                - http
    /products:
        post:
            tags:
                - store
            summary: listProducts store
            operationId: store#listProducts
            parameters:
                - name: minPrice
                  in: query
                  description: Minimum price filter
                  required: false
                  type: number
                  format: float
                - name: maxPrice
                  in: query
                  description: Maximum price filter
                  required: false
                  type: number
                  format: float
                - name: priceRange
                  in: query
                  description: Price range filter (e.g. [min, max])
                  required: false
                  type: array
                  items:
                    type: number
                  collectionFormat: multi
                - name: sortBy
                  in: query
                  description: 'Sort products by: ''price_asc'' or ''price_desc'''
                  required: false
                  type: string
            responses:
                "200":
                    description: OK response.
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/Product'
            schemes:
                - http
    /products/{id}:
        get:
            tags:
                - store
            summary: getProduct store
            operationId: store#getProduct
            parameters:
                - name: id
                  in: path
                  required: true
                  type: string
            responses:
                "200":
                    description: OK response.
                    schema:
                        $ref: '#/definitions/Product'
                        required:
                            - id
                            - name
                            - price
                            - inventory
                            - userId
                "404":
                    description: Not Found response.
                    schema:
                        $ref: '#/definitions/StoreGetProductNotFoundResponseBody'
            schemes:
                - http
    /users:
        get:
            tags:
                - store
            summary: getUserAll store
            operationId: store#getUserAll
            responses:
                "200":
                    description: OK response.
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/User'
            schemes:
                - http
        post:
            tags:
                - store
            summary: createUser store
            operationId: store#createUser
            parameters:
                - name: CreateUserRequestBody
                  in: body
                  required: true
                  schema:
                    $ref: '#/definitions/NewUser'
                    required:
                        - username
                        - email
                        - firstName
                        - lastName
                        - password
            responses:
                "201":
                    description: Created response.
                    schema:
                        $ref: '#/definitions/User'
                        required:
                            - id
                            - username
                            - email
            schemes:
                - http
    /users/{id}:
        get:
            tags:
                - store
            summary: getUser store
            operationId: store#getUser
            parameters:
                - name: id
                  in: path
                  required: true
                  type: string
            responses:
                "200":
                    description: OK response.
                    schema:
                        $ref: '#/definitions/User'
                        required:
                            - id
                            - username
                            - email
                "404":
                    description: Not Found response.
                    schema:
                        $ref: '#/definitions/StoreGetUserNotFoundResponseBody'
            schemes:
                - http
    /users/delete:
        post:
            tags:
                - store
            summary: deleteUser store
            operationId: store#deleteUser
            responses:
                "200":
                    description: OK response.
            schemes:
                - http
    /users/products:
        get:
            tags:
                - store
            summary: getProductsPostedByUser store
            description: Retrieve all products posted by the user
            operationId: store#getProductsPostedByUser
            responses:
                "200":
                    description: OK response.
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/Product'
            schemes:
                - http
    /users/update:
        post:
            tags:
                - store
            summary: updateUser store
            operationId: store#updateUser
            parameters:
                - name: UpdateUserRequestBody
                  in: body
                  required: true
                  schema:
                    $ref: '#/definitions/UserUpdatePayload'
                    required:
                        - email
                        - firstName
                        - lastName
            responses:
                "200":
                    description: OK response.
                    schema:
                        $ref: '#/definitions/User'
                        required:
                            - id
                            - username
                            - email
            schemes:
                - http
definitions:
    Cart:
        title: Cart
        type: object
        properties:
            id:
                type: string
                description: Unique cart ID
                example: Ullam sed.
            items:
                type: array
                items:
                    $ref: '#/definitions/CartItem'
                description: Items in the cart
                example:
                    - productID: Illum molestiae officiis alias maxime itaque.
                      quantity: 1589882558140131556
                    - productID: Illum molestiae officiis alias maxime itaque.
                      quantity: 1589882558140131556
                    - productID: Illum molestiae officiis alias maxime itaque.
                      quantity: 1589882558140131556
                    - productID: Illum molestiae officiis alias maxime itaque.
                      quantity: 1589882558140131556
            totalAmount:
                type: number
                description: Total amount of the cart
                example: 0.3306511110634297
                format: double
            userID:
                type: string
                description: ID of the user who owns the cart
                example: Quia velit culpa id consequatur nostrum.
        example:
            id: Reiciendis ab illum sed odit officiis aut.
            items:
                - productID: Illum molestiae officiis alias maxime itaque.
                  quantity: 1589882558140131556
                - productID: Illum molestiae officiis alias maxime itaque.
                  quantity: 1589882558140131556
            totalAmount: 0.3311800875957026
            userID: Iste cupiditate ducimus quis ipsum ab.
        required:
            - id
            - userID
            - items
            - totalAmount
    CartItem:
        title: CartItem
        type: object
        properties:
            productID:
                type: string
                description: ID of the product
                example: Voluptas soluta repudiandae.
            quantity:
                type: integer
                description: Quantity of the product
                example: 2332588073517969729
                format: int64
        example:
            productID: Dignissimos aut voluptatem nesciunt illo.
            quantity: 3016601830399099662
        required:
            - productID
            - quantity
    NewProduct:
        title: NewProduct
        type: object
        properties:
            description:
                type: string
                description: Product description
                example: Magnam aperiam animi.
            inventory:
                type: integer
                description: Available inventory
                example: 3850778803483259709
                format: int64
            name:
                type: string
                description: Product name
                example: Earum totam corporis.
            price:
                type: number
                description: Product price
                example: 0.25344742613260285
                format: double
        example:
            description: Harum sunt libero quos iste fuga.
            inventory: 2014222778127995958
            name: Repudiandae dolor aperiam sed cupiditate necessitatibus.
            price: 0.3595974821077298
        required:
            - name
            - price
            - inventory
    NewUser:
        title: NewUser
        type: object
        properties:
            email:
                type: string
                description: User's email address
                example: Necessitatibus itaque quo.
            firstName:
                type: string
                description: User's first name
                example: Necessitatibus natus voluptas culpa nesciunt.
            lastName:
                type: string
                description: User's last name
                example: Cumque natus quas.
            password:
                type: string
                description: User's password
                example: Dolorem distinctio.
            username:
                type: string
                description: User's username
                example: Sequi fuga et quia dolor facilis non.
        example:
            email: Totam totam reprehenderit quidem et veritatis non.
            firstName: Rerum ut voluptatum exercitationem quae.
            lastName: Odio enim esse autem delectus.
            password: Odio veniam voluptas fuga.
            username: Sed aut et perspiciatis sit dolorem.
        required:
            - username
            - email
            - firstName
            - lastName
            - password
    Order:
        title: Order
        type: object
        properties:
            id:
                type: string
                description: Unique order ID
                example: Cumque sit quod in facilis.
            items:
                type: array
                items:
                    $ref: '#/definitions/OrderItem'
                description: Items in the order
                example:
                    - price: 0.7467694187276578
                      productID: Aut ut voluptate eos qui officiis voluptatem.
                      quantity: 2144718963442018890
                      sellerID: Expedita eius dicta qui.
                      status: Perspiciatis sint.
                    - price: 0.7467694187276578
                      productID: Aut ut voluptate eos qui officiis voluptatem.
                      quantity: 2144718963442018890
                      sellerID: Expedita eius dicta qui.
                      status: Perspiciatis sint.
            overallStatus:
                type: string
                description: Overall status of the order
                example: Nisi aut.
            totalAmount:
                type: number
                description: Total amount of the order
                example: 0.944827073187208
                format: double
            userID:
                type: string
                description: ID of the user who placed the order
                example: Cupiditate labore voluptatem ut repellendus.
        example:
            id: Et itaque sapiente.
            items:
                - price: 0.7467694187276578
                  productID: Aut ut voluptate eos qui officiis voluptatem.
                  quantity: 2144718963442018890
                  sellerID: Expedita eius dicta qui.
                  status: Perspiciatis sint.
                - price: 0.7467694187276578
                  productID: Aut ut voluptate eos qui officiis voluptatem.
                  quantity: 2144718963442018890
                  sellerID: Expedita eius dicta qui.
                  status: Perspiciatis sint.
            overallStatus: Beatae voluptate modi ducimus qui neque.
            totalAmount: 0.058923111598524196
            userID: Dolor fugiat.
        required:
            - id
            - userID
            - items
            - totalAmount
            - overallStatus
    OrderItem:
        title: OrderItem
        type: object
        properties:
            price:
                type: number
                description: Price of the product at the time of order
                example: 0.8041332506513543
                format: double
            productID:
                type: string
                description: ID of the product
                example: In fugiat aut quam exercitationem illum accusamus.
            quantity:
                type: integer
                description: Quantity of the product
                example: 38086863530232358
                format: int64
            sellerID:
                type: string
                description: ID of the seller who posted this product
                example: Eaque et voluptatem.
            status:
                type: string
                description: Status of this specific item in the order
                example: Qui omnis voluptatem adipisci.
        example:
            price: 0.28637136638610344
            productID: Blanditiis quia autem ducimus temporibus rerum.
            quantity: 5037316447652696847
            sellerID: Est unde.
            status: Dolorem aut.
        required:
            - productID
            - sellerID
            - quantity
            - price
            - status
    Product:
        title: Product
        type: object
        properties:
            description:
                type: string
                description: Product description
                example: Veniam in quo.
            id:
                type: string
                description: Unique product ID
                example: Atque esse et velit ipsa earum.
            inventory:
                type: integer
                description: Available inventory
                example: 2946345747738770117
                format: int64
            name:
                type: string
                description: Product name
                example: Beatae soluta id ab adipisci in.
            price:
                type: number
                description: Product price
                example: 0.684904371262548
                format: double
            userId:
                type: string
                description: Product's owner's user ID
                example: Sed qui ut.
        example:
            description: Ea consequatur consectetur minima eos.
            id: Suscipit non.
            inventory: 8624747826453321603
            name: Omnis ullam voluptates dolore similique.
            price: 0.4763848578166555
            userId: Amet dolor eius vel.
        required:
            - id
            - name
            - price
            - inventory
            - userId
    StoreGetCartNotFoundResponseBody:
        title: 'Mediatype identifier: application/vnd.goa.error; view=default'
        type: object
        properties:
            fault:
                type: boolean
                description: Is the error a server-side fault?
                example: true
            id:
                type: string
                description: ID is a unique identifier for this particular occurrence of the problem.
                example: 123abc
            message:
                type: string
                description: Message is a human-readable explanation specific to this occurrence of the problem.
                example: parameter 'p' must be an integer
            name:
                type: string
                description: Name is the name of this class of errors.
                example: bad_request
            temporary:
                type: boolean
                description: Is the error temporary?
                example: true
            timeout:
                type: boolean
                description: Is the error a timeout?
                example: false
        description: getCart_not-found_response_body result type (default view)
        example:
            fault: true
            id: 123abc
            message: parameter 'p' must be an integer
            name: bad_request
            temporary: false
            timeout: false
        required:
            - name
            - id
            - message
            - temporary
            - timeout
            - fault
    StoreGetOrderNotFoundResponseBody:
        title: 'Mediatype identifier: application/vnd.goa.error; view=default'
        type: object
        properties:
            fault:
                type: boolean
                description: Is the error a server-side fault?
                example: true
            id:
                type: string
                description: ID is a unique identifier for this particular occurrence of the problem.
                example: 123abc
            message:
                type: string
                description: Message is a human-readable explanation specific to this occurrence of the problem.
                example: parameter 'p' must be an integer
            name:
                type: string
                description: Name is the name of this class of errors.
                example: bad_request
            temporary:
                type: boolean
                description: Is the error temporary?
                example: false
            timeout:
                type: boolean
                description: Is the error a timeout?
                example: false
        description: getOrder_not-found_response_body result type (default view)
        example:
            fault: true
            id: 123abc
            message: parameter 'p' must be an integer
            name: bad_request
            temporary: false
            timeout: false
        required:
            - name
            - id
            - message
            - temporary
            - timeout
            - fault
    StoreGetProductNotFoundResponseBody:
        title: 'Mediatype identifier: application/vnd.goa.error; view=default'
        type: object
        properties:
            fault:
                type: boolean
                description: Is the error a server-side fault?
                example: true
            id:
                type: string
                description: ID is a unique identifier for this particular occurrence of the problem.
                example: 123abc
            message:
                type: string
                description: Message is a human-readable explanation specific to this occurrence of the problem.
                example: parameter 'p' must be an integer
            name:
                type: string
                description: Name is the name of this class of errors.
                example: bad_request
            temporary:
                type: boolean
                description: Is the error temporary?
                example: true
            timeout:
                type: boolean
                description: Is the error a timeout?
                example: true
        description: getProduct_not-found_response_body result type (default view)
        example:
            fault: true
            id: 123abc
            message: parameter 'p' must be an integer
            name: bad_request
            temporary: false
            timeout: false
        required:
            - name
            - id
            - message
            - temporary
            - timeout
            - fault
    StoreGetUserNotFoundResponseBody:
        title: 'Mediatype identifier: application/vnd.goa.error; view=default'
        type: object
        properties:
            fault:
                type: boolean
                description: Is the error a server-side fault?
                example: false
            id:
                type: string
                description: ID is a unique identifier for this particular occurrence of the problem.
                example: 123abc
            message:
                type: string
                description: Message is a human-readable explanation specific to this occurrence of the problem.
                example: parameter 'p' must be an integer
            name:
                type: string
                description: Name is the name of this class of errors.
                example: bad_request
            temporary:
                type: boolean
                description: Is the error temporary?
                example: false
            timeout:
                type: boolean
                description: Is the error a timeout?
                example: true
        description: getUser_not-found_response_body result type (default view)
        example:
            fault: true
            id: 123abc
            message: parameter 'p' must be an integer
            name: bad_request
            temporary: true
            timeout: false
        required:
            - name
            - id
            - message
            - temporary
            - timeout
            - fault
    StoreLoginUserRequestBody:
        title: StoreLoginUserRequestBody
        type: object
        properties:
            password:
                type: string
                description: Password for login
                example: Qui nisi sunt ut repudiandae.
            username:
                type: string
                description: Username for login
                example: Porro exercitationem.
        example:
            password: Et aliquid velit similique dolorum fugit.
            username: Ab et libero provident.
        required:
            - username
            - password
    StoreLoginUserResponseBody:
        title: StoreLoginUserResponseBody
        type: object
        properties:
            token:
                type: string
                description: JWT token for the authenticated user
                example: Nostrum autem in voluptas atque iste sit.
        example:
            token: Vel quis.
    StoreUpdateOrderItemStatusRequestBody:
        title: StoreUpdateOrderItemStatusRequestBody
        type: object
        properties:
            status:
                type: string
                description: New status for the order item
                example: Sed laboriosam hic quasi.
        example:
            status: Laboriosam harum.
        required:
            - status
    User:
        title: User
        type: object
        properties:
            email:
                type: string
                description: User's email address
                example: Voluptatem rerum ipsam numquam.
            firstName:
                type: string
                description: User's first name
                example: Sed laboriosam.
            id:
                type: string
                description: Unique user ID
                example: Delectus non at suscipit et officiis omnis.
            lastName:
                type: string
                description: User's last name
                example: Velit recusandae temporibus eos dolorem voluptas.
            username:
                type: string
                description: User's username
                example: Placeat ut ut.
        example:
            email: Et et.
            firstName: Aut nesciunt.
            id: Aliquam libero sunt qui.
            lastName: Delectus a id incidunt distinctio ipsam.
            username: Ab autem.
        required:
            - id
            - username
            - email
    UserUpdatePayload:
        title: UserUpdatePayload
        type: object
        properties:
            email:
                type: string
                description: User's email address
                example: Et velit eos rerum veniam est.
            firstName:
                type: string
                description: User's first name
                example: Rem suscipit placeat.
            lastName:
                type: string
                description: User's last name
                example: Est aut excepturi reiciendis.
        example:
            email: Officiis aliquid.
            firstName: Unde incidunt maxime.
            lastName: Accusantium accusantium.
        required:
            - email
            - firstName
            - lastName
