swagger: "2.0"
info:
    title: Store API
    description: Service for a complete store with users, products, orders, and cart functionality
    version: 0.0.1
host: localhost:8000
consumes:
    - application/json
    - application/xml
    - application/gob
produces:
    - application/json
    - application/xml
    - application/gob
paths:
    /cart:
        get:
            tags:
                - store
            summary: getCart store
            operationId: store#getCart
            parameters:
                - name: GetCartRequestBody
                  in: body
                  required: true
                  schema:
                    $ref: '#/definitions/GetCartPayload'
                    required:
                        - userID
            responses:
                "200":
                    description: OK response.
                    schema:
                        $ref: '#/definitions/Cart'
                        required:
                            - id
                            - userID
                            - items
                            - totalAmount
                "404":
                    description: Not Found response.
                    schema:
                        $ref: '#/definitions/StoreGetCartNotFoundResponseBody'
            schemes:
                - http
    /cart/items:
        post:
            tags:
                - store
            summary: addToCart store
            operationId: store#addToCart
            parameters:
                - name: AddToCartRequestBody
                  in: body
                  required: true
                  schema:
                    $ref: '#/definitions/CartItem'
                    required:
                        - userID
                        - productID
                        - quantity
            responses:
                "200":
                    description: OK response.
                    schema:
                        $ref: '#/definitions/Cart'
                        required:
                            - id
                            - userID
                            - items
                            - totalAmount
            schemes:
                - http
    /orders:
        post:
            tags:
                - store
            summary: createOrder store
            operationId: store#createOrder
            parameters:
                - name: CreateOrderRequestBody
                  in: body
                  required: true
                  schema:
                    $ref: '#/definitions/NewOrder'
                    required:
                        - userID
                        - items
            responses:
                "201":
                    description: Created response.
                    schema:
                        $ref: '#/definitions/Order'
                        required:
                            - id
                            - userID
                            - items
                            - totalAmount
                            - status
            schemes:
                - http
    /orders/{id}:
        get:
            tags:
                - store
            summary: getOrder store
            operationId: store#getOrder
            parameters:
                - name: id
                  in: path
                  required: true
                  type: string
            responses:
                "200":
                    description: OK response.
                    schema:
                        $ref: '#/definitions/Order'
                        required:
                            - id
                            - userID
                            - items
                            - totalAmount
                            - status
                "404":
                    description: Not Found response.
                    schema:
                        $ref: '#/definitions/StoreGetOrderNotFoundResponseBody'
            schemes:
                - http
    /products:
        get:
            tags:
                - store
            summary: listProducts store
            operationId: store#listProducts
            responses:
                "200":
                    description: OK response.
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/Product'
            schemes:
                - http
        post:
            tags:
                - store
            summary: createProduct store
            operationId: store#createProduct
            parameters:
                - name: CreateProductRequestBody
                  in: body
                  required: true
                  schema:
                    $ref: '#/definitions/NewProduct'
                    required:
                        - name
                        - price
                        - inventory
            responses:
                "201":
                    description: Created response.
                    schema:
                        $ref: '#/definitions/Product'
                        required:
                            - id
                            - name
                            - price
                            - inventory
            schemes:
                - http
    /products/{id}:
        get:
            tags:
                - store
            summary: getProduct store
            operationId: store#getProduct
            parameters:
                - name: id
                  in: path
                  required: true
                  type: string
            responses:
                "200":
                    description: OK response.
                    schema:
                        $ref: '#/definitions/Product'
                        required:
                            - id
                            - name
                            - price
                            - inventory
                "404":
                    description: Not Found response.
                    schema:
                        $ref: '#/definitions/StoreGetProductNotFoundResponseBody'
            schemes:
                - http
    /users:
        get:
            tags:
                - store
            summary: getUserAll store
            operationId: store#getUserAll
            responses:
                "200":
                    description: OK response.
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/User'
            schemes:
                - http
        post:
            tags:
                - store
            summary: createUser store
            operationId: store#createUser
            parameters:
                - name: CreateUserRequestBody
                  in: body
                  required: true
                  schema:
                    $ref: '#/definitions/NewUser'
                    required:
                        - username
                        - email
            responses:
                "201":
                    description: Created response.
                    schema:
                        $ref: '#/definitions/User'
                        required:
                            - id
                            - username
                            - email
            schemes:
                - http
    /users/{id}:
        get:
            tags:
                - store
            summary: getUser store
            operationId: store#getUser
            parameters:
                - name: id
                  in: path
                  required: true
                  type: string
            responses:
                "200":
                    description: OK response.
                    schema:
                        $ref: '#/definitions/User'
                        required:
                            - id
                            - username
                            - email
                "404":
                    description: Not Found response.
                    schema:
                        $ref: '#/definitions/StoreGetUserNotFoundResponseBody'
            schemes:
                - http
    /users/{userID}/orders:
        get:
            tags:
                - store
            summary: "getUserOrders\t store"
            description: Retrieve all orders for a specific user
            operationId: "store#getUserOrders\t"
            parameters:
                - name: userID
                  in: path
                  required: true
                  type: string
            responses:
                "200":
                    description: OK response.
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/Order'
                "404":
                    description: Not Found response.
                    schema:
                        $ref: '#/definitions/StoreGetUserOrdersNotFoundResponseBody'
            schemes:
                - http
definitions:
    Cart:
        title: Cart
        type: object
        properties:
            id:
                type: string
                description: Unique cart ID
                example: Et officiis omnis vel.
            items:
                type: array
                items:
                    $ref: '#/definitions/CartItem'
                description: Items in the cart
                example:
                    - price: 0.22032443407957475
                      productID: Ut minima.
                      quantity: 9041534554655855612
                      userID: Cumque dolores facere ipsa earum in.
                    - price: 0.22032443407957475
                      productID: Ut minima.
                      quantity: 9041534554655855612
                      userID: Cumque dolores facere ipsa earum in.
                    - price: 0.22032443407957475
                      productID: Ut minima.
                      quantity: 9041534554655855612
                      userID: Cumque dolores facere ipsa earum in.
            totalAmount:
                type: number
                description: Total amount of items in the cart
                example: 0.9292638365697204
                format: double
            userID:
                type: string
                description: ID of the user who owns the cart
                example: Ut ut.
        example:
            id: Aut nesciunt.
            items:
                - price: 0.22032443407957475
                  productID: Ut minima.
                  quantity: 9041534554655855612
                  userID: Cumque dolores facere ipsa earum in.
                - price: 0.22032443407957475
                  productID: Ut minima.
                  quantity: 9041534554655855612
                  userID: Cumque dolores facere ipsa earum in.
                - price: 0.22032443407957475
                  productID: Ut minima.
                  quantity: 9041534554655855612
                  userID: Cumque dolores facere ipsa earum in.
            totalAmount: 0.633431506316731
            userID: Delectus a id incidunt distinctio ipsam.
        required:
            - id
            - userID
            - items
            - totalAmount
    CartItem:
        title: CartItem
        type: object
        properties:
            price:
                type: number
                description: Price of the product
                example: 0.6341649174931546
                format: double
            productID:
                type: string
                description: ID of the product
                example: Sed laboriosam.
            quantity:
                type: integer
                description: Quantity of the product
                example: 5674214946805988907
                format: int64
            userID:
                type: string
                description: ID of the user who owns the cart
                example: Voluptatem rerum ipsam numquam.
        example:
            price: 0.9480788812367933
            productID: Molestiae aliquam libero sunt qui rerum ab.
            quantity: 4229046095204632020
            userID: Temporibus eos dolorem.
        required:
            - userID
            - productID
            - quantity
    GetCartPayload:
        title: GetCartPayload
        type: object
        properties:
            userID:
                type: string
                description: ID of the user whose cart to retrieve
                example: Necessitatibus itaque quo.
        example:
            userID: Necessitatibus natus voluptas culpa nesciunt.
        required:
            - userID
    NewOrder:
        title: NewOrder
        type: object
        properties:
            items:
                type: array
                items:
                    $ref: '#/definitions/OrderItem'
                description: Items in the order
                example:
                    - price: 0.2782759670844699
                      productID: Et est doloribus ut at.
                      quantity: 1281967412391717881
                    - price: 0.2782759670844699
                      productID: Et est doloribus ut at.
                      quantity: 1281967412391717881
                    - price: 0.2782759670844699
                      productID: Et est doloribus ut at.
                      quantity: 1281967412391717881
                    - price: 0.2782759670844699
                      productID: Et est doloribus ut at.
                      quantity: 1281967412391717881
            userID:
                type: string
                description: ID of the user placing the order
                example: Libero et.
        example:
            items:
                - price: 0.2782759670844699
                  productID: Et est doloribus ut at.
                  quantity: 1281967412391717881
                - price: 0.2782759670844699
                  productID: Et est doloribus ut at.
                  quantity: 1281967412391717881
                - price: 0.2782759670844699
                  productID: Et est doloribus ut at.
                  quantity: 1281967412391717881
            userID: Iure et labore omnis.
        required:
            - userID
            - items
    NewProduct:
        title: NewProduct
        type: object
        properties:
            description:
                type: string
                description: Product description
                example: Vero omnis quo reiciendis vitae.
            inventory:
                type: integer
                description: Available inventory
                example: 745089766863748877
                format: int64
            name:
                type: string
                description: Product name
                example: Possimus sint et ut quo.
            price:
                type: number
                description: Product price
                example: 0.1837371323052284
                format: double
        example:
            description: Iusto itaque.
            inventory: 6295403606976008367
            name: Et ut.
            price: 0.2124722065947645
        required:
            - name
            - price
            - inventory
    NewUser:
        title: NewUser
        type: object
        properties:
            email:
                type: string
                description: User's email address
                example: Eos qui officiis voluptatem quae expedita eius.
            firstName:
                type: string
                description: User's first name
                example: Qui aut.
            lastName:
                type: string
                description: User's last name
                example: Nihil perspiciatis sint ex pariatur cumque sit.
            username:
                type: string
                description: User's username
                example: Quia aut ut.
        example:
            email: Unde ab quo alias.
            firstName: Quisquam fuga beatae dolor totam voluptas.
            lastName: Unde explicabo.
            username: Adipisci provident accusamus fugit.
        required:
            - username
            - email
    Order:
        title: Order
        type: object
        properties:
            id:
                type: string
                description: Unique order ID
                example: Reiciendis provident quasi voluptates.
            items:
                type: array
                items:
                    $ref: '#/definitions/OrderItem'
                description: Items in the order
                example:
                    - price: 0.7615839668081023
                      productID: Nesciunt odio quis et in.
                      quantity: 4486002618916453051
                    - price: 0.7615839668081023
                      productID: Nesciunt odio quis et in.
                      quantity: 4486002618916453051
            status:
                type: string
                description: Order status
                example: Iste aut ipsa tempore.
            totalAmount:
                type: number
                description: Total amount of the order
                example: 0.20304479706653186
                format: double
            userID:
                type: string
                description: ID of the user who placed the order
                example: Rerum temporibus dolor cupiditate.
        example:
            id: Rem dolorum.
            items:
                - price: 0.7615839668081023
                  productID: Nesciunt odio quis et in.
                  quantity: 4486002618916453051
                - price: 0.7615839668081023
                  productID: Nesciunt odio quis et in.
                  quantity: 4486002618916453051
                - price: 0.7615839668081023
                  productID: Nesciunt odio quis et in.
                  quantity: 4486002618916453051
            status: Est quod molestias dolorem quia autem.
            totalAmount: 0.14876466098256627
            userID: Magnam omnis.
        required:
            - id
            - userID
            - items
            - totalAmount
            - status
    OrderItem:
        title: OrderItem
        type: object
        properties:
            price:
                type: number
                description: Price of the product at the time of order
                example: 0.6088573350457896
                format: double
            productID:
                type: string
                description: ID of the product
                example: Odit odio ipsam et quas.
            quantity:
                type: integer
                description: Quantity of the product
                example: 7397646295308265483
                format: int64
        example:
            price: 0.03251049114088036
            productID: Ut libero dolores eum in.
            quantity: 4717221142105674666
        required:
            - productID
            - quantity
            - price
    Product:
        title: Product
        type: object
        properties:
            description:
                type: string
                description: Product description
                example: Amet ex accusamus omnis omnis quidem.
            id:
                type: string
                description: Unique product ID
                example: Ullam occaecati animi non hic.
            inventory:
                type: integer
                description: Available inventory
                example: 6035669163701945539
                format: int64
            name:
                type: string
                description: Product name
                example: Id error aspernatur esse hic placeat explicabo.
            price:
                type: number
                description: Product price
                example: 0.48072195907535586
                format: double
        example:
            description: Sed sit nesciunt odit perferendis.
            id: Itaque tempore et commodi laudantium.
            inventory: 3857783571317687309
            name: Magni nobis dolore voluptate dolorem blanditiis.
            price: 0.36658435974543896
        required:
            - id
            - name
            - price
            - inventory
    StoreGetCartNotFoundResponseBody:
        title: 'Mediatype identifier: application/vnd.goa.error; view=default'
        type: object
        properties:
            fault:
                type: boolean
                description: Is the error a server-side fault?
                example: true
            id:
                type: string
                description: ID is a unique identifier for this particular occurrence of the problem.
                example: 123abc
            message:
                type: string
                description: Message is a human-readable explanation specific to this occurrence of the problem.
                example: parameter 'p' must be an integer
            name:
                type: string
                description: Name is the name of this class of errors.
                example: bad_request
            temporary:
                type: boolean
                description: Is the error temporary?
                example: false
            timeout:
                type: boolean
                description: Is the error a timeout?
                example: true
        description: getCart_not-found_response_body result type (default view)
        example:
            fault: false
            id: 123abc
            message: parameter 'p' must be an integer
            name: bad_request
            temporary: true
            timeout: true
        required:
            - name
            - id
            - message
            - temporary
            - timeout
            - fault
    StoreGetOrderNotFoundResponseBody:
        title: 'Mediatype identifier: application/vnd.goa.error; view=default'
        type: object
        properties:
            fault:
                type: boolean
                description: Is the error a server-side fault?
                example: false
            id:
                type: string
                description: ID is a unique identifier for this particular occurrence of the problem.
                example: 123abc
            message:
                type: string
                description: Message is a human-readable explanation specific to this occurrence of the problem.
                example: parameter 'p' must be an integer
            name:
                type: string
                description: Name is the name of this class of errors.
                example: bad_request
            temporary:
                type: boolean
                description: Is the error temporary?
                example: true
            timeout:
                type: boolean
                description: Is the error a timeout?
                example: false
        description: getOrder_not-found_response_body result type (default view)
        example:
            fault: false
            id: 123abc
            message: parameter 'p' must be an integer
            name: bad_request
            temporary: false
            timeout: false
        required:
            - name
            - id
            - message
            - temporary
            - timeout
            - fault
    StoreGetProductNotFoundResponseBody:
        title: 'Mediatype identifier: application/vnd.goa.error; view=default'
        type: object
        properties:
            fault:
                type: boolean
                description: Is the error a server-side fault?
                example: true
            id:
                type: string
                description: ID is a unique identifier for this particular occurrence of the problem.
                example: 123abc
            message:
                type: string
                description: Message is a human-readable explanation specific to this occurrence of the problem.
                example: parameter 'p' must be an integer
            name:
                type: string
                description: Name is the name of this class of errors.
                example: bad_request
            temporary:
                type: boolean
                description: Is the error temporary?
                example: true
            timeout:
                type: boolean
                description: Is the error a timeout?
                example: true
        description: getProduct_not-found_response_body result type (default view)
        example:
            fault: false
            id: 123abc
            message: parameter 'p' must be an integer
            name: bad_request
            temporary: false
            timeout: false
        required:
            - name
            - id
            - message
            - temporary
            - timeout
            - fault
    StoreGetUserNotFoundResponseBody:
        title: 'Mediatype identifier: application/vnd.goa.error; view=default'
        type: object
        properties:
            fault:
                type: boolean
                description: Is the error a server-side fault?
                example: true
            id:
                type: string
                description: ID is a unique identifier for this particular occurrence of the problem.
                example: 123abc
            message:
                type: string
                description: Message is a human-readable explanation specific to this occurrence of the problem.
                example: parameter 'p' must be an integer
            name:
                type: string
                description: Name is the name of this class of errors.
                example: bad_request
            temporary:
                type: boolean
                description: Is the error temporary?
                example: true
            timeout:
                type: boolean
                description: Is the error a timeout?
                example: true
        description: getUser_not-found_response_body result type (default view)
        example:
            fault: false
            id: 123abc
            message: parameter 'p' must be an integer
            name: bad_request
            temporary: false
            timeout: false
        required:
            - name
            - id
            - message
            - temporary
            - timeout
            - fault
    StoreGetUserOrdersNotFoundResponseBody:
        title: 'Mediatype identifier: application/vnd.goa.error; view=default'
        type: object
        properties:
            fault:
                type: boolean
                description: Is the error a server-side fault?
                example: true
            id:
                type: string
                description: ID is a unique identifier for this particular occurrence of the problem.
                example: 123abc
            message:
                type: string
                description: Message is a human-readable explanation specific to this occurrence of the problem.
                example: parameter 'p' must be an integer
            name:
                type: string
                description: Name is the name of this class of errors.
                example: bad_request
            temporary:
                type: boolean
                description: Is the error temporary?
                example: true
            timeout:
                type: boolean
                description: Is the error a timeout?
                example: true
        description: "getUserOrders\t_not-found_response_body result type (default view)"
        example:
            fault: true
            id: 123abc
            message: parameter 'p' must be an integer
            name: bad_request
            temporary: true
            timeout: true
        required:
            - name
            - id
            - message
            - temporary
            - timeout
            - fault
    User:
        title: User
        type: object
        properties:
            email:
                type: string
                description: User's email address
                example: Debitis perspiciatis sint perspiciatis laboriosam non consectetur.
            firstName:
                type: string
                description: User's first name
                example: Blanditiis harum et.
            id:
                type: string
                description: Unique user ID
                example: Ea harum illum molestiae officiis alias maxime.
            lastName:
                type: string
                description: User's last name
                example: Vero in impedit.
            username:
                type: string
                description: User's username
                example: Beatae dicta reprehenderit sed.
        example:
            email: Ut quam corrupti totam in.
            firstName: Reprehenderit sint tempora dolores ratione ut maiores.
            id: Magnam harum dolores placeat accusamus a.
            lastName: Culpa esse et quia doloremque voluptates praesentium.
            username: Explicabo ullam omnis.
        required:
            - id
            - username
            - email
