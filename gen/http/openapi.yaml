swagger: "2.0"
info:
    title: Store API
    description: Service for a complete store with users, products, carts, and orders
    version: 0.0.1
host: localhost:8000
consumes:
    - application/json
    - application/xml
    - application/gob
produces:
    - application/json
    - application/xml
    - application/gob
paths:
    /cart:
        get:
            tags:
                - store
            summary: getCart store
            operationId: store#getCart
            responses:
                "200":
                    description: OK response.
                    schema:
                        $ref: '#/definitions/Cart'
                        required:
                            - id
                            - userID
                            - items
                            - totalAmount
                "404":
                    description: Not Found response.
                    schema:
                        $ref: '#/definitions/StoreGetCartNotFoundResponseBody'
            schemes:
                - http
    /cart/item:
        post:
            tags:
                - store
            summary: addToCart store
            operationId: store#addToCart
            parameters:
                - name: AddToCartRequestBody
                  in: body
                  required: true
                  schema:
                    $ref: '#/definitions/CartItem'
                    required:
                        - productID
                        - quantity
            responses:
                "200":
                    description: OK response.
                    schema:
                        $ref: '#/definitions/Cart'
                        required:
                            - id
                            - userID
                            - items
                            - totalAmount
            schemes:
                - http
    /cart/item/{productID}:
        delete:
            tags:
                - store
            summary: removeFromCart store
            operationId: store#removeFromCart
            parameters:
                - name: productID
                  in: path
                  required: true
                  type: string
            responses:
                "200":
                    description: OK response.
                    schema:
                        $ref: '#/definitions/Cart'
                        required:
                            - id
                            - userID
                            - items
                            - totalAmount
            schemes:
                - http
    /login:
        post:
            tags:
                - store
            summary: loginUser store
            description: Login a user and return a JWT token
            operationId: store#loginUser
            parameters:
                - name: LoginUserRequestBody
                  in: body
                  required: true
                  schema:
                    $ref: '#/definitions/StoreLoginUserRequestBody'
                    required:
                        - username
                        - password
            responses:
                "200":
                    description: OK response.
                    schema:
                        $ref: '#/definitions/StoreLoginUserResponseBody'
                "401":
                    description: Unauthorized response.
                    schema:
                        type: string
            schemes:
                - http
    /orders:
        get:
            tags:
                - store
            summary: getUserOrders store
            description: Retrieve all orders for the authenticated user
            operationId: store#getUserOrders
            responses:
                "200":
                    description: OK response.
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/Order'
            schemes:
                - http
        post:
            tags:
                - store
            summary: createOrder store
            description: Create an order from the current cart
            operationId: store#createOrder
            responses:
                "201":
                    description: Created response.
                    schema:
                        $ref: '#/definitions/Order'
                        required:
                            - id
                            - userID
                            - items
                            - totalAmount
                            - status
            schemes:
                - http
    /orders/{id}:
        get:
            tags:
                - store
            summary: getOrder store
            operationId: store#getOrder
            parameters:
                - name: id
                  in: path
                  required: true
                  type: string
            responses:
                "200":
                    description: OK response.
                    schema:
                        $ref: '#/definitions/Order'
                        required:
                            - id
                            - userID
                            - items
                            - totalAmount
                            - status
                "404":
                    description: Not Found response.
                    schema:
                        $ref: '#/definitions/StoreGetOrderNotFoundResponseBody'
            schemes:
                - http
        delete:
            tags:
                - store
            summary: deleteOrder store
            description: Delete an order from the current cart
            operationId: store#deleteOrder
            parameters:
                - name: id
                  in: path
                  required: true
                  type: string
            responses:
                "200":
                    description: OK response.
            schemes:
                - http
    /products:
        get:
            tags:
                - store
            summary: listProducts store
            operationId: store#listProducts
            responses:
                "200":
                    description: OK response.
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/Product'
            schemes:
                - http
        post:
            tags:
                - store
            summary: createProduct store
            operationId: store#createProduct
            parameters:
                - name: CreateProductRequestBody
                  in: body
                  required: true
                  schema:
                    $ref: '#/definitions/NewProduct'
                    required:
                        - name
                        - price
                        - inventory
            responses:
                "201":
                    description: Created response.
                    schema:
                        $ref: '#/definitions/Product'
                        required:
                            - id
                            - name
                            - price
                            - inventory
                            - userId
            schemes:
                - http
    /products/{id}:
        get:
            tags:
                - store
            summary: getProduct store
            operationId: store#getProduct
            parameters:
                - name: id
                  in: path
                  required: true
                  type: string
            responses:
                "200":
                    description: OK response.
                    schema:
                        $ref: '#/definitions/Product'
                        required:
                            - id
                            - name
                            - price
                            - inventory
                            - userId
                "404":
                    description: Not Found response.
                    schema:
                        $ref: '#/definitions/StoreGetProductNotFoundResponseBody'
            schemes:
                - http
    /users:
        get:
            tags:
                - store
            summary: getUserAll store
            operationId: store#getUserAll
            responses:
                "200":
                    description: OK response.
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/User'
            schemes:
                - http
        post:
            tags:
                - store
            summary: createUser store
            operationId: store#createUser
            parameters:
                - name: CreateUserRequestBody
                  in: body
                  required: true
                  schema:
                    $ref: '#/definitions/NewUser'
                    required:
                        - username
                        - email
                        - firstName
                        - lastName
                        - password
            responses:
                "201":
                    description: Created response.
                    schema:
                        $ref: '#/definitions/User'
                        required:
                            - id
                            - username
                            - email
            schemes:
                - http
    /users/{id}:
        get:
            tags:
                - store
            summary: getUser store
            operationId: store#getUser
            parameters:
                - name: id
                  in: path
                  required: true
                  type: string
            responses:
                "200":
                    description: OK response.
                    schema:
                        $ref: '#/definitions/User'
                        required:
                            - id
                            - username
                            - email
                "404":
                    description: Not Found response.
                    schema:
                        $ref: '#/definitions/StoreGetUserNotFoundResponseBody'
            schemes:
                - http
    /users/delete:
        post:
            tags:
                - store
            summary: deleteUser store
            operationId: store#deleteUser
            responses:
                "200":
                    description: OK response.
            schemes:
                - http
    /users/products:
        get:
            tags:
                - store
            summary: getProductsPostedByUser store
            description: Retrieve all products posted by the user
            operationId: store#getProductsPostedByUser
            responses:
                "200":
                    description: OK response.
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/Product'
            schemes:
                - http
    /users/update:
        post:
            tags:
                - store
            summary: updateUser store
            operationId: store#updateUser
            parameters:
                - name: UpdateUserRequestBody
                  in: body
                  required: true
                  schema:
                    $ref: '#/definitions/UserUpdatePayload'
                    required:
                        - email
                        - firstName
                        - lastName
            responses:
                "200":
                    description: OK response.
                    schema:
                        $ref: '#/definitions/User'
                        required:
                            - id
                            - username
                            - email
            schemes:
                - http
definitions:
    Cart:
        title: Cart
        type: object
        properties:
            id:
                type: string
                description: Unique cart ID
                example: Vel quis.
            items:
                type: array
                items:
                    $ref: '#/definitions/CartItem'
                description: Items in the cart
                example:
                    - productID: Minima pariatur ipsum excepturi ut aut.
                      quantity: 6923369631714392185
                    - productID: Minima pariatur ipsum excepturi ut aut.
                      quantity: 6923369631714392185
            totalAmount:
                type: number
                description: Total amount of the cart
                example: 0.7833093879417963
                format: double
            userID:
                type: string
                description: ID of the user who owns the cart
                example: Porro exercitationem.
        example:
            id: Velit similique dolorum fugit ut.
            items:
                - productID: Minima pariatur ipsum excepturi ut aut.
                  quantity: 6923369631714392185
                - productID: Minima pariatur ipsum excepturi ut aut.
                  quantity: 6923369631714392185
                - productID: Minima pariatur ipsum excepturi ut aut.
                  quantity: 6923369631714392185
            totalAmount: 0.7731142051542936
            userID: Sit facilis tempore eligendi beatae et.
        required:
            - id
            - userID
            - items
            - totalAmount
    CartItem:
        title: CartItem
        type: object
        properties:
            productID:
                type: string
                description: ID of the product
                example: Qui nisi sunt ut repudiandae.
            quantity:
                type: integer
                description: Quantity of the product
                example: 580678859167239833
                format: int64
        example:
            productID: Et libero.
            quantity: 6645493072206927953
        required:
            - productID
            - quantity
    NewProduct:
        title: NewProduct
        type: object
        properties:
            description:
                type: string
                description: Product description
                example: Non rerum ut voluptatum exercitationem quae culpa.
            inventory:
                type: integer
                description: Available inventory
                example: 8343006538234369332
                format: int64
            name:
                type: string
                description: Product name
                example: Reprehenderit quidem et veritatis.
            price:
                type: number
                description: Product price
                example: 0.8615446401385439
                format: double
        example:
            description: Veniam voluptas fuga.
            inventory: 1644258813849524523
            name: Autem delectus autem.
            price: 0.27293891242626106
        required:
            - name
            - price
            - inventory
    NewUser:
        title: NewUser
        type: object
        properties:
            email:
                type: string
                description: User's email address
                example: Quo iusto itaque dolorem.
            firstName:
                type: string
                description: User's first name
                example: Et dolorem et.
            lastName:
                type: string
                description: User's last name
                example: Porro dolores aperiam reiciendis provident quasi.
            password:
                type: string
                description: User's password
                example: Voluptatem rerum temporibus dolor cupiditate id.
            username:
                type: string
                description: User's username
                example: Quod aut et.
        example:
            email: Debitis est.
            firstName: Libero dolores eum in magni provident sapiente.
            lastName: Autem iste aut ipsa tempore.
            password: Rem dolorum.
            username: Odio ipsam et quas.
        required:
            - username
            - email
            - firstName
            - lastName
            - password
    Order:
        title: Order
        type: object
        properties:
            id:
                type: string
                description: Unique order ID
                example: Numquam est aut excepturi reiciendis.
            items:
                type: array
                items:
                    $ref: '#/definitions/OrderItem'
                description: Items in the order
                example:
                    - price: 0.6027906018285304
                      productID: In impedit vel magnam harum.
                      quantity: 4600357725173986859
                    - price: 0.6027906018285304
                      productID: In impedit vel magnam harum.
                      quantity: 4600357725173986859
                    - price: 0.6027906018285304
                      productID: In impedit vel magnam harum.
                      quantity: 4600357725173986859
            status:
                type: string
                description: Order status
                example: Et velit ipsa earum natus beatae.
            totalAmount:
                type: number
                description: Total amount of the order
                example: 0.13008734274954406
                format: double
            userID:
                type: string
                description: ID of the user who placed the order
                example: Officiis aliquid.
        example:
            id: Id ab adipisci.
            items:
                - price: 0.6027906018285304
                  productID: In impedit vel magnam harum.
                  quantity: 4600357725173986859
                - price: 0.6027906018285304
                  productID: In impedit vel magnam harum.
                  quantity: 4600357725173986859
                - price: 0.6027906018285304
                  productID: In impedit vel magnam harum.
                  quantity: 4600357725173986859
            status: Vel quia.
            totalAmount: 0.7597892745589203
            userID: Nihil veniam in quo qui vel laborum.
        required:
            - id
            - userID
            - items
            - totalAmount
            - status
    OrderItem:
        title: OrderItem
        type: object
        properties:
            price:
                type: number
                description: Price of the product at the time of order
                example: 0.9465471723882013
                format: double
            productID:
                type: string
                description: ID of the product
                example: Unde incidunt maxime.
            quantity:
                type: integer
                description: Quantity of the product
                example: 479991329559556715
                format: int64
        example:
            price: 0.8394698880819121
            productID: Nisi sed.
            quantity: 2967839708275597540
        required:
            - productID
            - quantity
            - price
    Product:
        title: Product
        type: object
        properties:
            description:
                type: string
                description: Product description
                example: Et quia dolor facilis non quaerat necessitatibus.
            id:
                type: string
                description: Unique product ID
                example: Nesciunt laudantium delectus a.
            inventory:
                type: integer
                description: Available inventory
                example: 8742817712674567232
                format: int64
            name:
                type: string
                description: Product name
                example: Incidunt distinctio ipsam minus sequi.
            price:
                type: number
                description: Product price
                example: 0.7714411440483371
                format: double
            userId:
                type: string
                description: Product's owner's user ID
                example: Ratione et et deserunt.
        example:
            description: Sed aut et perspiciatis sit dolorem.
            id: Cumque natus quas.
            inventory: 5491949124356088522
            name: Dolorem distinctio.
            price: 0.32937112336048535
            userId: Necessitatibus natus voluptas culpa nesciunt.
        required:
            - id
            - name
            - price
            - inventory
            - userId
    StoreGetCartNotFoundResponseBody:
        title: 'Mediatype identifier: application/vnd.goa.error; view=default'
        type: object
        properties:
            fault:
                type: boolean
                description: Is the error a server-side fault?
                example: false
            id:
                type: string
                description: ID is a unique identifier for this particular occurrence of the problem.
                example: 123abc
            message:
                type: string
                description: Message is a human-readable explanation specific to this occurrence of the problem.
                example: parameter 'p' must be an integer
            name:
                type: string
                description: Name is the name of this class of errors.
                example: bad_request
            temporary:
                type: boolean
                description: Is the error temporary?
                example: true
            timeout:
                type: boolean
                description: Is the error a timeout?
                example: false
        description: getCart_not-found_response_body result type (default view)
        example:
            fault: true
            id: 123abc
            message: parameter 'p' must be an integer
            name: bad_request
            temporary: false
            timeout: true
        required:
            - name
            - id
            - message
            - temporary
            - timeout
            - fault
    StoreGetOrderNotFoundResponseBody:
        title: 'Mediatype identifier: application/vnd.goa.error; view=default'
        type: object
        properties:
            fault:
                type: boolean
                description: Is the error a server-side fault?
                example: false
            id:
                type: string
                description: ID is a unique identifier for this particular occurrence of the problem.
                example: 123abc
            message:
                type: string
                description: Message is a human-readable explanation specific to this occurrence of the problem.
                example: parameter 'p' must be an integer
            name:
                type: string
                description: Name is the name of this class of errors.
                example: bad_request
            temporary:
                type: boolean
                description: Is the error temporary?
                example: true
            timeout:
                type: boolean
                description: Is the error a timeout?
                example: true
        description: getOrder_not-found_response_body result type (default view)
        example:
            fault: false
            id: 123abc
            message: parameter 'p' must be an integer
            name: bad_request
            temporary: false
            timeout: false
        required:
            - name
            - id
            - message
            - temporary
            - timeout
            - fault
    StoreGetProductNotFoundResponseBody:
        title: 'Mediatype identifier: application/vnd.goa.error; view=default'
        type: object
        properties:
            fault:
                type: boolean
                description: Is the error a server-side fault?
                example: true
            id:
                type: string
                description: ID is a unique identifier for this particular occurrence of the problem.
                example: 123abc
            message:
                type: string
                description: Message is a human-readable explanation specific to this occurrence of the problem.
                example: parameter 'p' must be an integer
            name:
                type: string
                description: Name is the name of this class of errors.
                example: bad_request
            temporary:
                type: boolean
                description: Is the error temporary?
                example: false
            timeout:
                type: boolean
                description: Is the error a timeout?
                example: false
        description: getProduct_not-found_response_body result type (default view)
        example:
            fault: false
            id: 123abc
            message: parameter 'p' must be an integer
            name: bad_request
            temporary: true
            timeout: false
        required:
            - name
            - id
            - message
            - temporary
            - timeout
            - fault
    StoreGetUserNotFoundResponseBody:
        title: 'Mediatype identifier: application/vnd.goa.error; view=default'
        type: object
        properties:
            fault:
                type: boolean
                description: Is the error a server-side fault?
                example: true
            id:
                type: string
                description: ID is a unique identifier for this particular occurrence of the problem.
                example: 123abc
            message:
                type: string
                description: Message is a human-readable explanation specific to this occurrence of the problem.
                example: parameter 'p' must be an integer
            name:
                type: string
                description: Name is the name of this class of errors.
                example: bad_request
            temporary:
                type: boolean
                description: Is the error temporary?
                example: true
            timeout:
                type: boolean
                description: Is the error a timeout?
                example: true
        description: getUser_not-found_response_body result type (default view)
        example:
            fault: false
            id: 123abc
            message: parameter 'p' must be an integer
            name: bad_request
            temporary: true
            timeout: false
        required:
            - name
            - id
            - message
            - temporary
            - timeout
            - fault
    StoreLoginUserRequestBody:
        title: StoreLoginUserRequestBody
        type: object
        properties:
            password:
                type: string
                description: Password for login
                example: Iure et labore omnis.
            username:
                type: string
                description: Username for login
                example: Autem in libero et inventore.
        example:
            password: Dolor praesentium.
            username: Nisi eum adipisci quia enim.
        required:
            - username
            - password
    StoreLoginUserResponseBody:
        title: StoreLoginUserResponseBody
        type: object
        properties:
            token:
                type: string
                description: JWT token for the authenticated user
                example: Magnam omnis.
        example:
            token: Placeat ut est quod molestias dolorem.
    User:
        title: User
        type: object
        properties:
            email:
                type: string
                description: User's email address
                example: Omnis omnis.
            firstName:
                type: string
                description: User's first name
                example: Alias et earum itaque.
            id:
                type: string
                description: Unique user ID
                example: Error aspernatur.
            lastName:
                type: string
                description: User's last name
                example: Et commodi laudantium excepturi.
            username:
                type: string
                description: User's username
                example: Hic placeat explicabo reprehenderit amet ex.
        example:
            email: Alias consequatur.
            firstName: Possimus sint et ut quo.
            id: Nobis dolore voluptate dolorem blanditiis non sed.
            lastName: Vero omnis quo reiciendis vitae.
            username: Nesciunt odit.
        required:
            - id
            - username
            - email
    UserUpdatePayload:
        title: UserUpdatePayload
        type: object
        properties:
            email:
                type: string
                description: User's email address
                example: Omnis vel placeat.
            firstName:
                type: string
                description: User's first name
                example: Ut at.
            lastName:
                type: string
                description: User's last name
                example: Rerum ipsam numquam cumque.
        example:
            email: Laboriosam laudantium velit recusandae.
            firstName: Eos dolorem voluptas molestiae aliquam libero.
            lastName: Qui rerum ab.
        required:
            - email
            - firstName
            - lastName
