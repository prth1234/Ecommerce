// Code generated by goa v3.19.0, DO NOT EDIT.
//
// store HTTP server
//
// Command:
// $ goa gen store/design

package server

import (
	"context"
	"net/http"
	store "store/gen/store"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the store service endpoint HTTP handlers.
type Server struct {
	Mounts                  []*MountPoint
	CreateUser              http.Handler
	LoginUser               http.Handler
	GetUser                 http.Handler
	GetUserAll              http.Handler
	UpdateUser              http.Handler
	DeleteUser              http.Handler
	CreateProduct           http.Handler
	GetProduct              http.Handler
	ListProducts            http.Handler
	AddToCart               http.Handler
	RemoveFromCart          http.Handler
	GetCart                 http.Handler
	CreateOrder             http.Handler
	DeleteOrder             http.Handler
	GetOrder                http.Handler
	GetUserOrders           http.Handler
	GetProductsPostedByUser http.Handler
	UpdateOrderItemStatus   http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the store service endpoints using the
// provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *store.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"CreateUser", "POST", "/users"},
			{"LoginUser", "POST", "/login"},
			{"GetUser", "GET", "/users/{id}"},
			{"GetUserAll", "GET", "/users"},
			{"UpdateUser", "POST", "/users/update"},
			{"DeleteUser", "POST", "/users/delete"},
			{"CreateProduct", "POST", "/products"},
			{"GetProduct", "GET", "/products/{id}"},
			{"ListProducts", "GET", "/products"},
			{"AddToCart", "POST", "/cart/item"},
			{"RemoveFromCart", "DELETE", "/cart/item/{productID}"},
			{"GetCart", "GET", "/cart"},
			{"CreateOrder", "POST", "/orders"},
			{"DeleteOrder", "DELETE", "/orders/{id}"},
			{"GetOrder", "GET", "/orders/{id}"},
			{"GetUserOrders", "GET", "/orders"},
			{"GetProductsPostedByUser", "GET", "/users/products"},
			{"UpdateOrderItemStatus", "PATCH", "/orders/{orderID}/items/{productID}"},
		},
		CreateUser:              NewCreateUserHandler(e.CreateUser, mux, decoder, encoder, errhandler, formatter),
		LoginUser:               NewLoginUserHandler(e.LoginUser, mux, decoder, encoder, errhandler, formatter),
		GetUser:                 NewGetUserHandler(e.GetUser, mux, decoder, encoder, errhandler, formatter),
		GetUserAll:              NewGetUserAllHandler(e.GetUserAll, mux, decoder, encoder, errhandler, formatter),
		UpdateUser:              NewUpdateUserHandler(e.UpdateUser, mux, decoder, encoder, errhandler, formatter),
		DeleteUser:              NewDeleteUserHandler(e.DeleteUser, mux, decoder, encoder, errhandler, formatter),
		CreateProduct:           NewCreateProductHandler(e.CreateProduct, mux, decoder, encoder, errhandler, formatter),
		GetProduct:              NewGetProductHandler(e.GetProduct, mux, decoder, encoder, errhandler, formatter),
		ListProducts:            NewListProductsHandler(e.ListProducts, mux, decoder, encoder, errhandler, formatter),
		AddToCart:               NewAddToCartHandler(e.AddToCart, mux, decoder, encoder, errhandler, formatter),
		RemoveFromCart:          NewRemoveFromCartHandler(e.RemoveFromCart, mux, decoder, encoder, errhandler, formatter),
		GetCart:                 NewGetCartHandler(e.GetCart, mux, decoder, encoder, errhandler, formatter),
		CreateOrder:             NewCreateOrderHandler(e.CreateOrder, mux, decoder, encoder, errhandler, formatter),
		DeleteOrder:             NewDeleteOrderHandler(e.DeleteOrder, mux, decoder, encoder, errhandler, formatter),
		GetOrder:                NewGetOrderHandler(e.GetOrder, mux, decoder, encoder, errhandler, formatter),
		GetUserOrders:           NewGetUserOrdersHandler(e.GetUserOrders, mux, decoder, encoder, errhandler, formatter),
		GetProductsPostedByUser: NewGetProductsPostedByUserHandler(e.GetProductsPostedByUser, mux, decoder, encoder, errhandler, formatter),
		UpdateOrderItemStatus:   NewUpdateOrderItemStatusHandler(e.UpdateOrderItemStatus, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "store" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.CreateUser = m(s.CreateUser)
	s.LoginUser = m(s.LoginUser)
	s.GetUser = m(s.GetUser)
	s.GetUserAll = m(s.GetUserAll)
	s.UpdateUser = m(s.UpdateUser)
	s.DeleteUser = m(s.DeleteUser)
	s.CreateProduct = m(s.CreateProduct)
	s.GetProduct = m(s.GetProduct)
	s.ListProducts = m(s.ListProducts)
	s.AddToCart = m(s.AddToCart)
	s.RemoveFromCart = m(s.RemoveFromCart)
	s.GetCart = m(s.GetCart)
	s.CreateOrder = m(s.CreateOrder)
	s.DeleteOrder = m(s.DeleteOrder)
	s.GetOrder = m(s.GetOrder)
	s.GetUserOrders = m(s.GetUserOrders)
	s.GetProductsPostedByUser = m(s.GetProductsPostedByUser)
	s.UpdateOrderItemStatus = m(s.UpdateOrderItemStatus)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return store.MethodNames[:] }

// Mount configures the mux to serve the store endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountCreateUserHandler(mux, h.CreateUser)
	MountLoginUserHandler(mux, h.LoginUser)
	MountGetUserHandler(mux, h.GetUser)
	MountGetUserAllHandler(mux, h.GetUserAll)
	MountUpdateUserHandler(mux, h.UpdateUser)
	MountDeleteUserHandler(mux, h.DeleteUser)
	MountCreateProductHandler(mux, h.CreateProduct)
	MountGetProductHandler(mux, h.GetProduct)
	MountListProductsHandler(mux, h.ListProducts)
	MountAddToCartHandler(mux, h.AddToCart)
	MountRemoveFromCartHandler(mux, h.RemoveFromCart)
	MountGetCartHandler(mux, h.GetCart)
	MountCreateOrderHandler(mux, h.CreateOrder)
	MountDeleteOrderHandler(mux, h.DeleteOrder)
	MountGetOrderHandler(mux, h.GetOrder)
	MountGetUserOrdersHandler(mux, h.GetUserOrders)
	MountGetProductsPostedByUserHandler(mux, h.GetProductsPostedByUser)
	MountUpdateOrderItemStatusHandler(mux, h.UpdateOrderItemStatus)
}

// Mount configures the mux to serve the store endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountCreateUserHandler configures the mux to serve the "store" service
// "createUser" endpoint.
func MountCreateUserHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/users", f)
}

// NewCreateUserHandler creates a HTTP handler which loads the HTTP request and
// calls the "store" service "createUser" endpoint.
func NewCreateUserHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateUserRequest(mux, decoder)
		encodeResponse = EncodeCreateUserResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "createUser")
		ctx = context.WithValue(ctx, goa.ServiceKey, "store")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountLoginUserHandler configures the mux to serve the "store" service
// "loginUser" endpoint.
func MountLoginUserHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/login", f)
}

// NewLoginUserHandler creates a HTTP handler which loads the HTTP request and
// calls the "store" service "loginUser" endpoint.
func NewLoginUserHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeLoginUserRequest(mux, decoder)
		encodeResponse = EncodeLoginUserResponse(encoder)
		encodeError    = EncodeLoginUserError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "loginUser")
		ctx = context.WithValue(ctx, goa.ServiceKey, "store")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetUserHandler configures the mux to serve the "store" service
// "getUser" endpoint.
func MountGetUserHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/users/{id}", f)
}

// NewGetUserHandler creates a HTTP handler which loads the HTTP request and
// calls the "store" service "getUser" endpoint.
func NewGetUserHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetUserRequest(mux, decoder)
		encodeResponse = EncodeGetUserResponse(encoder)
		encodeError    = EncodeGetUserError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getUser")
		ctx = context.WithValue(ctx, goa.ServiceKey, "store")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetUserAllHandler configures the mux to serve the "store" service
// "getUserAll" endpoint.
func MountGetUserAllHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/users", f)
}

// NewGetUserAllHandler creates a HTTP handler which loads the HTTP request and
// calls the "store" service "getUserAll" endpoint.
func NewGetUserAllHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeGetUserAllResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getUserAll")
		ctx = context.WithValue(ctx, goa.ServiceKey, "store")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateUserHandler configures the mux to serve the "store" service
// "updateUser" endpoint.
func MountUpdateUserHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/users/update", f)
}

// NewUpdateUserHandler creates a HTTP handler which loads the HTTP request and
// calls the "store" service "updateUser" endpoint.
func NewUpdateUserHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateUserRequest(mux, decoder)
		encodeResponse = EncodeUpdateUserResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "updateUser")
		ctx = context.WithValue(ctx, goa.ServiceKey, "store")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteUserHandler configures the mux to serve the "store" service
// "deleteUser" endpoint.
func MountDeleteUserHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/users/delete", f)
}

// NewDeleteUserHandler creates a HTTP handler which loads the HTTP request and
// calls the "store" service "deleteUser" endpoint.
func NewDeleteUserHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeDeleteUserResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "deleteUser")
		ctx = context.WithValue(ctx, goa.ServiceKey, "store")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateProductHandler configures the mux to serve the "store" service
// "createProduct" endpoint.
func MountCreateProductHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/products", f)
}

// NewCreateProductHandler creates a HTTP handler which loads the HTTP request
// and calls the "store" service "createProduct" endpoint.
func NewCreateProductHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateProductRequest(mux, decoder)
		encodeResponse = EncodeCreateProductResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "createProduct")
		ctx = context.WithValue(ctx, goa.ServiceKey, "store")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetProductHandler configures the mux to serve the "store" service
// "getProduct" endpoint.
func MountGetProductHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/products/{id}", f)
}

// NewGetProductHandler creates a HTTP handler which loads the HTTP request and
// calls the "store" service "getProduct" endpoint.
func NewGetProductHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetProductRequest(mux, decoder)
		encodeResponse = EncodeGetProductResponse(encoder)
		encodeError    = EncodeGetProductError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getProduct")
		ctx = context.WithValue(ctx, goa.ServiceKey, "store")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountListProductsHandler configures the mux to serve the "store" service
// "listProducts" endpoint.
func MountListProductsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/products", f)
}

// NewListProductsHandler creates a HTTP handler which loads the HTTP request
// and calls the "store" service "listProducts" endpoint.
func NewListProductsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeListProductsResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "listProducts")
		ctx = context.WithValue(ctx, goa.ServiceKey, "store")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountAddToCartHandler configures the mux to serve the "store" service
// "addToCart" endpoint.
func MountAddToCartHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/cart/item", f)
}

// NewAddToCartHandler creates a HTTP handler which loads the HTTP request and
// calls the "store" service "addToCart" endpoint.
func NewAddToCartHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeAddToCartRequest(mux, decoder)
		encodeResponse = EncodeAddToCartResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "addToCart")
		ctx = context.WithValue(ctx, goa.ServiceKey, "store")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountRemoveFromCartHandler configures the mux to serve the "store" service
// "removeFromCart" endpoint.
func MountRemoveFromCartHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/cart/item/{productID}", f)
}

// NewRemoveFromCartHandler creates a HTTP handler which loads the HTTP request
// and calls the "store" service "removeFromCart" endpoint.
func NewRemoveFromCartHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeRemoveFromCartRequest(mux, decoder)
		encodeResponse = EncodeRemoveFromCartResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "removeFromCart")
		ctx = context.WithValue(ctx, goa.ServiceKey, "store")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetCartHandler configures the mux to serve the "store" service
// "getCart" endpoint.
func MountGetCartHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/cart", f)
}

// NewGetCartHandler creates a HTTP handler which loads the HTTP request and
// calls the "store" service "getCart" endpoint.
func NewGetCartHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeGetCartResponse(encoder)
		encodeError    = EncodeGetCartError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getCart")
		ctx = context.WithValue(ctx, goa.ServiceKey, "store")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateOrderHandler configures the mux to serve the "store" service
// "createOrder" endpoint.
func MountCreateOrderHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/orders", f)
}

// NewCreateOrderHandler creates a HTTP handler which loads the HTTP request
// and calls the "store" service "createOrder" endpoint.
func NewCreateOrderHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeCreateOrderResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "createOrder")
		ctx = context.WithValue(ctx, goa.ServiceKey, "store")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteOrderHandler configures the mux to serve the "store" service
// "deleteOrder" endpoint.
func MountDeleteOrderHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/orders/{id}", f)
}

// NewDeleteOrderHandler creates a HTTP handler which loads the HTTP request
// and calls the "store" service "deleteOrder" endpoint.
func NewDeleteOrderHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteOrderRequest(mux, decoder)
		encodeResponse = EncodeDeleteOrderResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "deleteOrder")
		ctx = context.WithValue(ctx, goa.ServiceKey, "store")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetOrderHandler configures the mux to serve the "store" service
// "getOrder" endpoint.
func MountGetOrderHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/orders/{id}", f)
}

// NewGetOrderHandler creates a HTTP handler which loads the HTTP request and
// calls the "store" service "getOrder" endpoint.
func NewGetOrderHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetOrderRequest(mux, decoder)
		encodeResponse = EncodeGetOrderResponse(encoder)
		encodeError    = EncodeGetOrderError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getOrder")
		ctx = context.WithValue(ctx, goa.ServiceKey, "store")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetUserOrdersHandler configures the mux to serve the "store" service
// "getUserOrders" endpoint.
func MountGetUserOrdersHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/orders", f)
}

// NewGetUserOrdersHandler creates a HTTP handler which loads the HTTP request
// and calls the "store" service "getUserOrders" endpoint.
func NewGetUserOrdersHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeGetUserOrdersResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getUserOrders")
		ctx = context.WithValue(ctx, goa.ServiceKey, "store")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetProductsPostedByUserHandler configures the mux to serve the "store"
// service "getProductsPostedByUser" endpoint.
func MountGetProductsPostedByUserHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/users/products", f)
}

// NewGetProductsPostedByUserHandler creates a HTTP handler which loads the
// HTTP request and calls the "store" service "getProductsPostedByUser"
// endpoint.
func NewGetProductsPostedByUserHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeGetProductsPostedByUserResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getProductsPostedByUser")
		ctx = context.WithValue(ctx, goa.ServiceKey, "store")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateOrderItemStatusHandler configures the mux to serve the "store"
// service "updateOrderItemStatus" endpoint.
func MountUpdateOrderItemStatusHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PATCH", "/orders/{orderID}/items/{productID}", f)
}

// NewUpdateOrderItemStatusHandler creates a HTTP handler which loads the HTTP
// request and calls the "store" service "updateOrderItemStatus" endpoint.
func NewUpdateOrderItemStatusHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateOrderItemStatusRequest(mux, decoder)
		encodeResponse = EncodeUpdateOrderItemStatusResponse(encoder)
		encodeError    = EncodeUpdateOrderItemStatusError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "updateOrderItemStatus")
		ctx = context.WithValue(ctx, goa.ServiceKey, "store")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
