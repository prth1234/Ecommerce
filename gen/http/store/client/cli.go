// Code generated by goa v3.19.0, DO NOT EDIT.
//
// store HTTP client CLI support package
//
// Command:
// $ goa gen store/design

package client

import (
	"encoding/json"
	"fmt"
	store "store/gen/store"
)

// BuildCreateUserPayload builds the payload for the store createUser endpoint
// from CLI flags.
func BuildCreateUserPayload(storeCreateUserBody string) (*store.NewUser, error) {
	var err error
	var body CreateUserRequestBody
	{
		err = json.Unmarshal([]byte(storeCreateUserBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"email\": \"Inventore quis omnis facilis.\",\n      \"firstName\": \"Nulla eius qui culpa.\",\n      \"lastName\": \"Et repudiandae.\",\n      \"password\": \"Deleniti sint debitis reprehenderit dicta non odit.\",\n      \"username\": \"Labore nam a placeat.\"\n   }'")
		}
	}
	v := &store.NewUser{
		Username:  body.Username,
		Email:     body.Email,
		FirstName: body.FirstName,
		LastName:  body.LastName,
		Password:  body.Password,
	}

	return v, nil
}

// BuildLoginUserPayload builds the payload for the store loginUser endpoint
// from CLI flags.
func BuildLoginUserPayload(storeLoginUserBody string) (*store.LoginUserPayload, error) {
	var err error
	var body LoginUserRequestBody
	{
		err = json.Unmarshal([]byte(storeLoginUserBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"password\": \"Sed voluptatem aspernatur.\",\n      \"username\": \"Praesentium et aut.\"\n   }'")
		}
	}
	v := &store.LoginUserPayload{
		Username: body.Username,
		Password: body.Password,
	}

	return v, nil
}

// BuildGetUserPayload builds the payload for the store getUser endpoint from
// CLI flags.
func BuildGetUserPayload(storeGetUserID string) (*store.GetUserPayload, error) {
	var id string
	{
		id = storeGetUserID
	}
	v := &store.GetUserPayload{}
	v.ID = id

	return v, nil
}

// BuildUpdateUserPayload builds the payload for the store updateUser endpoint
// from CLI flags.
func BuildUpdateUserPayload(storeUpdateUserBody string) (*store.UserUpdatePayload, error) {
	var err error
	var body UpdateUserRequestBody
	{
		err = json.Unmarshal([]byte(storeUpdateUserBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"email\": \"Sunt quia est aperiam.\",\n      \"firstName\": \"Cupiditate assumenda doloribus ea porro laborum.\",\n      \"lastName\": \"Dolor itaque quia nam et optio fugit.\"\n   }'")
		}
	}
	v := &store.UserUpdatePayload{
		Email:     body.Email,
		FirstName: body.FirstName,
		LastName:  body.LastName,
	}

	return v, nil
}

// BuildCreateProductPayload builds the payload for the store createProduct
// endpoint from CLI flags.
func BuildCreateProductPayload(storeCreateProductBody string) (*store.NewProduct, error) {
	var err error
	var body CreateProductRequestBody
	{
		err = json.Unmarshal([]byte(storeCreateProductBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"Odio quis et in quis.\",\n      \"inventory\": 4772358921376199104,\n      \"name\": \"Doloribus ut at quasi et nihil.\",\n      \"price\": 0.7615839668081023\n   }'")
		}
	}
	v := &store.NewProduct{
		Name:        body.Name,
		Description: body.Description,
		Price:       body.Price,
		Inventory:   body.Inventory,
	}

	return v, nil
}

// BuildGetProductPayload builds the payload for the store getProduct endpoint
// from CLI flags.
func BuildGetProductPayload(storeGetProductID string) (*store.GetProductPayload, error) {
	var id string
	{
		id = storeGetProductID
	}
	v := &store.GetProductPayload{}
	v.ID = id

	return v, nil
}

// BuildAddToCartPayload builds the payload for the store addToCart endpoint
// from CLI flags.
func BuildAddToCartPayload(storeAddToCartBody string) (*store.CartItem, error) {
	var err error
	var body AddToCartRequestBody
	{
		err = json.Unmarshal([]byte(storeAddToCartBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"productID\": \"Odio laboriosam in rerum quia.\",\n      \"quantity\": 2846043470729779113\n   }'")
		}
	}
	v := &store.CartItem{
		ProductID: body.ProductID,
		Quantity:  body.Quantity,
	}

	return v, nil
}

// BuildRemoveFromCartPayload builds the payload for the store removeFromCart
// endpoint from CLI flags.
func BuildRemoveFromCartPayload(storeRemoveFromCartProductID string) (*store.RemoveFromCartPayload, error) {
	var productID string
	{
		productID = storeRemoveFromCartProductID
	}
	v := &store.RemoveFromCartPayload{}
	v.ProductID = productID

	return v, nil
}

// BuildDeleteOrderPayload builds the payload for the store deleteOrder
// endpoint from CLI flags.
func BuildDeleteOrderPayload(storeDeleteOrderID string) (*store.DeleteOrderPayload, error) {
	var id string
	{
		id = storeDeleteOrderID
	}
	v := &store.DeleteOrderPayload{}
	v.ID = id

	return v, nil
}

// BuildGetOrderPayload builds the payload for the store getOrder endpoint from
// CLI flags.
func BuildGetOrderPayload(storeGetOrderID string) (*store.GetOrderPayload, error) {
	var id string
	{
		id = storeGetOrderID
	}
	v := &store.GetOrderPayload{}
	v.ID = id

	return v, nil
}
