// Code generated by goa v3.19.0, DO NOT EDIT.
//
// store HTTP client CLI support package
//
// Command:
// $ goa gen store/design

package client

import (
	"encoding/json"
	"fmt"
	store "store/gen/store"

	goa "goa.design/goa/v3/pkg"
)

// BuildCreateUserPayload builds the payload for the store createUser endpoint
// from CLI flags.
func BuildCreateUserPayload(storeCreateUserBody string) (*store.NewUser, error) {
	var err error
	var body CreateUserRequestBody
	{
		err = json.Unmarshal([]byte(storeCreateUserBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"email\": \"Quibusdam necessitatibus impedit nihil.\",\n      \"firstName\": \"Doloremque possimus esse temporibus.\",\n      \"lastName\": \"Repellendus facilis sint.\",\n      \"password\": \"Et minus velit sed alias consequatur dolores.\",\n      \"username\": \"Deleniti sint debitis reprehenderit dicta non odit.\"\n   }'")
		}
	}
	v := &store.NewUser{
		Username:  body.Username,
		Email:     body.Email,
		FirstName: body.FirstName,
		LastName:  body.LastName,
		Password:  body.Password,
	}

	return v, nil
}

// BuildLoginUserPayload builds the payload for the store loginUser endpoint
// from CLI flags.
func BuildLoginUserPayload(storeLoginUserBody string) (*store.LoginUserPayload, error) {
	var err error
	var body LoginUserRequestBody
	{
		err = json.Unmarshal([]byte(storeLoginUserBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"password\": \"Ratione aut.\",\n      \"username\": \"Nostrum ea quae sint qui.\"\n   }'")
		}
	}
	v := &store.LoginUserPayload{
		Username: body.Username,
		Password: body.Password,
	}

	return v, nil
}

// BuildGetUserPayload builds the payload for the store getUser endpoint from
// CLI flags.
func BuildGetUserPayload(storeGetUserID string) (*store.GetUserPayload, error) {
	var id string
	{
		id = storeGetUserID
	}
	v := &store.GetUserPayload{}
	v.ID = id

	return v, nil
}

// BuildUpdateUserPayload builds the payload for the store updateUser endpoint
// from CLI flags.
func BuildUpdateUserPayload(storeUpdateUserBody string) (*store.UserUpdatePayload, error) {
	var err error
	var body UpdateUserRequestBody
	{
		err = json.Unmarshal([]byte(storeUpdateUserBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"email\": \"Est doloribus ut at.\",\n      \"firstName\": \"Et nihil nesciunt odio quis et in.\",\n      \"lastName\": \"Vel quam ab occaecati pariatur recusandae eum.\"\n   }'")
		}
	}
	v := &store.UserUpdatePayload{
		Email:     body.Email,
		FirstName: body.FirstName,
		LastName:  body.LastName,
	}

	return v, nil
}

// BuildCreateProductPayload builds the payload for the store createProduct
// endpoint from CLI flags.
func BuildCreateProductPayload(storeCreateProductBody string) (*store.NewProduct, error) {
	var err error
	var body CreateProductRequestBody
	{
		err = json.Unmarshal([]byte(storeCreateProductBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"Dolorum sunt aut distinctio cupiditate.\",\n      \"inventory\": 6723610395239258144,\n      \"name\": \"Aperiam autem earum.\",\n      \"price\": 0.7051507925775151\n   }'")
		}
	}
	v := &store.NewProduct{
		Name:        body.Name,
		Description: body.Description,
		Price:       body.Price,
		Inventory:   body.Inventory,
	}

	return v, nil
}

// BuildGetProductPayload builds the payload for the store getProduct endpoint
// from CLI flags.
func BuildGetProductPayload(storeGetProductID string) (*store.GetProductPayload, error) {
	var id string
	{
		id = storeGetProductID
	}
	v := &store.GetProductPayload{}
	v.ID = id

	return v, nil
}

// BuildCreateOrderPayload builds the payload for the store createOrder
// endpoint from CLI flags.
func BuildCreateOrderPayload(storeCreateOrderBody string) (*store.NewOrder, error) {
	var err error
	var body CreateOrderRequestBody
	{
		err = json.Unmarshal([]byte(storeCreateOrderBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"items\": [\n         {\n            \"price\": 0.3823852716922111,\n            \"productID\": \"Doloribus nulla consequuntur officia beatae laudantium.\",\n            \"quantity\": 6492112474321122596\n         },\n         {\n            \"price\": 0.3823852716922111,\n            \"productID\": \"Doloribus nulla consequuntur officia beatae laudantium.\",\n            \"quantity\": 6492112474321122596\n         }\n      ]\n   }'")
		}
		if body.Items == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("items", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &store.NewOrder{}
	if body.Items != nil {
		v.Items = make([]*store.OrderItem, len(body.Items))
		for i, val := range body.Items {
			v.Items[i] = marshalOrderItemRequestBodyToStoreOrderItem(val)
		}
	} else {
		v.Items = []*store.OrderItem{}
	}

	return v, nil
}

// BuildGetOrderPayload builds the payload for the store getOrder endpoint from
// CLI flags.
func BuildGetOrderPayload(storeGetOrderID string) (*store.GetOrderPayload, error) {
	var id string
	{
		id = storeGetOrderID
	}
	v := &store.GetOrderPayload{}
	v.ID = id

	return v, nil
}

// BuildGetUserOrdersPayload builds the payload for the store getUserOrders
// endpoint from CLI flags.
func BuildGetUserOrdersPayload(storeGetUserOrdersUserID string) (*store.GetUserOrdersPayload, error) {
	var userID string
	{
		userID = storeGetUserOrdersUserID
	}
	v := &store.GetUserOrdersPayload{}
	v.UserID = userID

	return v, nil
}

// BuildAddToCartPayload builds the payload for the store addToCart endpoint
// from CLI flags.
func BuildAddToCartPayload(storeAddToCartBody string) (*store.CartItem, error) {
	var err error
	var body AddToCartRequestBody
	{
		err = json.Unmarshal([]byte(storeAddToCartBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"price\": 0.004896430620712159,\n      \"productID\": \"Unde explicabo.\",\n      \"quantity\": 1039259567183560186,\n      \"userID\": \"Quisquam fuga beatae dolor totam voluptas.\"\n   }'")
		}
	}
	v := &store.CartItem{
		UserID:    body.UserID,
		ProductID: body.ProductID,
		Quantity:  body.Quantity,
		Price:     body.Price,
	}

	return v, nil
}

// BuildGetCartPayload builds the payload for the store getCart endpoint from
// CLI flags.
func BuildGetCartPayload(storeGetCartBody string) (*store.GetCartPayload, error) {
	var err error
	var body GetCartRequestBody
	{
		err = json.Unmarshal([]byte(storeGetCartBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"userID\": \"Alias et earum itaque.\"\n   }'")
		}
	}
	v := &store.GetCartPayload{
		UserID: body.UserID,
	}

	return v, nil
}
