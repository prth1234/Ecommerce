// Code generated by goa v3.19.0, DO NOT EDIT.
//
// store client HTTP transport
//
// Command:
// $ goa gen store/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the store service endpoint HTTP clients.
type Client struct {
	// CreateUser Doer is the HTTP client used to make requests to the createUser
	// endpoint.
	CreateUserDoer goahttp.Doer

	// LoginUser Doer is the HTTP client used to make requests to the loginUser
	// endpoint.
	LoginUserDoer goahttp.Doer

	// GetUser Doer is the HTTP client used to make requests to the getUser
	// endpoint.
	GetUserDoer goahttp.Doer

	// GetUserAll Doer is the HTTP client used to make requests to the getUserAll
	// endpoint.
	GetUserAllDoer goahttp.Doer

	// UpdateUser Doer is the HTTP client used to make requests to the updateUser
	// endpoint.
	UpdateUserDoer goahttp.Doer

	// DeleteUser Doer is the HTTP client used to make requests to the deleteUser
	// endpoint.
	DeleteUserDoer goahttp.Doer

	// CreateProduct Doer is the HTTP client used to make requests to the
	// createProduct endpoint.
	CreateProductDoer goahttp.Doer

	// GetProduct Doer is the HTTP client used to make requests to the getProduct
	// endpoint.
	GetProductDoer goahttp.Doer

	// ListProducts Doer is the HTTP client used to make requests to the
	// listProducts endpoint.
	ListProductsDoer goahttp.Doer

	// CreateOrder Doer is the HTTP client used to make requests to the createOrder
	// endpoint.
	CreateOrderDoer goahttp.Doer

	// GetOrder Doer is the HTTP client used to make requests to the getOrder
	// endpoint.
	GetOrderDoer goahttp.Doer

	// GetUserOrders Doer is the HTTP client used to make requests to the
	// getUserOrders endpoint.
	GetUserOrdersDoer goahttp.Doer

	// AddToCart Doer is the HTTP client used to make requests to the addToCart
	// endpoint.
	AddToCartDoer goahttp.Doer

	// GetCart Doer is the HTTP client used to make requests to the getCart
	// endpoint.
	GetCartDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the store service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		CreateUserDoer:      doer,
		LoginUserDoer:       doer,
		GetUserDoer:         doer,
		GetUserAllDoer:      doer,
		UpdateUserDoer:      doer,
		DeleteUserDoer:      doer,
		CreateProductDoer:   doer,
		GetProductDoer:      doer,
		ListProductsDoer:    doer,
		CreateOrderDoer:     doer,
		GetOrderDoer:        doer,
		GetUserOrdersDoer:   doer,
		AddToCartDoer:       doer,
		GetCartDoer:         doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// CreateUser returns an endpoint that makes HTTP requests to the store service
// createUser server.
func (c *Client) CreateUser() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateUserRequest(c.encoder)
		decodeResponse = DecodeCreateUserResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateUserRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateUserDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("store", "createUser", err)
		}
		return decodeResponse(resp)
	}
}

// LoginUser returns an endpoint that makes HTTP requests to the store service
// loginUser server.
func (c *Client) LoginUser() goa.Endpoint {
	var (
		encodeRequest  = EncodeLoginUserRequest(c.encoder)
		decodeResponse = DecodeLoginUserResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildLoginUserRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.LoginUserDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("store", "loginUser", err)
		}
		return decodeResponse(resp)
	}
}

// GetUser returns an endpoint that makes HTTP requests to the store service
// getUser server.
func (c *Client) GetUser() goa.Endpoint {
	var (
		decodeResponse = DecodeGetUserResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetUserRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetUserDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("store", "getUser", err)
		}
		return decodeResponse(resp)
	}
}

// GetUserAll returns an endpoint that makes HTTP requests to the store service
// getUserAll server.
func (c *Client) GetUserAll() goa.Endpoint {
	var (
		decodeResponse = DecodeGetUserAllResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetUserAllRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetUserAllDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("store", "getUserAll", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateUser returns an endpoint that makes HTTP requests to the store service
// updateUser server.
func (c *Client) UpdateUser() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateUserRequest(c.encoder)
		decodeResponse = DecodeUpdateUserResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateUserRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateUserDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("store", "updateUser", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteUser returns an endpoint that makes HTTP requests to the store service
// deleteUser server.
func (c *Client) DeleteUser() goa.Endpoint {
	var (
		decodeResponse = DecodeDeleteUserResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteUserRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteUserDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("store", "deleteUser", err)
		}
		return decodeResponse(resp)
	}
}

// CreateProduct returns an endpoint that makes HTTP requests to the store
// service createProduct server.
func (c *Client) CreateProduct() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateProductRequest(c.encoder)
		decodeResponse = DecodeCreateProductResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateProductRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateProductDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("store", "createProduct", err)
		}
		return decodeResponse(resp)
	}
}

// GetProduct returns an endpoint that makes HTTP requests to the store service
// getProduct server.
func (c *Client) GetProduct() goa.Endpoint {
	var (
		decodeResponse = DecodeGetProductResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetProductRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetProductDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("store", "getProduct", err)
		}
		return decodeResponse(resp)
	}
}

// ListProducts returns an endpoint that makes HTTP requests to the store
// service listProducts server.
func (c *Client) ListProducts() goa.Endpoint {
	var (
		decodeResponse = DecodeListProductsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildListProductsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListProductsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("store", "listProducts", err)
		}
		return decodeResponse(resp)
	}
}

// CreateOrder returns an endpoint that makes HTTP requests to the store
// service createOrder server.
func (c *Client) CreateOrder() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateOrderRequest(c.encoder)
		decodeResponse = DecodeCreateOrderResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateOrderRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateOrderDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("store", "createOrder", err)
		}
		return decodeResponse(resp)
	}
}

// GetOrder returns an endpoint that makes HTTP requests to the store service
// getOrder server.
func (c *Client) GetOrder() goa.Endpoint {
	var (
		decodeResponse = DecodeGetOrderResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetOrderRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetOrderDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("store", "getOrder", err)
		}
		return decodeResponse(resp)
	}
}

// GetUserOrders returns an endpoint that makes HTTP requests to the store
// service getUserOrders server.
func (c *Client) GetUserOrders() goa.Endpoint {
	var (
		decodeResponse = DecodeGetUserOrdersResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetUserOrdersRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetUserOrdersDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("store", "getUserOrders", err)
		}
		return decodeResponse(resp)
	}
}

// AddToCart returns an endpoint that makes HTTP requests to the store service
// addToCart server.
func (c *Client) AddToCart() goa.Endpoint {
	var (
		encodeRequest  = EncodeAddToCartRequest(c.encoder)
		decodeResponse = DecodeAddToCartResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildAddToCartRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AddToCartDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("store", "addToCart", err)
		}
		return decodeResponse(resp)
	}
}

// GetCart returns an endpoint that makes HTTP requests to the store service
// getCart server.
func (c *Client) GetCart() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetCartRequest(c.encoder)
		decodeResponse = DecodeGetCartResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetCartRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetCartDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("store", "getCart", err)
		}
		return decodeResponse(resp)
	}
}
