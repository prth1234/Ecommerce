// Code generated by goa v3.19.0, DO NOT EDIT.
//
// store HTTP client types
//
// Command:
// $ goa gen store/design

package client

import (
	store "store/gen/store"

	goa "goa.design/goa/v3/pkg"
)

// CreateUserRequestBody is the type of the "store" service "createUser"
// endpoint HTTP request body.
type CreateUserRequestBody struct {
	// User's username
	Username string `form:"username" json:"username" xml:"username"`
	// User's email address
	Email string `form:"email" json:"email" xml:"email"`
	// User's first name
	FirstName string `form:"firstName" json:"firstName" xml:"firstName"`
	// User's last name
	LastName string `form:"lastName" json:"lastName" xml:"lastName"`
	// User's password
	Password string `form:"password" json:"password" xml:"password"`
}

// LoginUserRequestBody is the type of the "store" service "loginUser" endpoint
// HTTP request body.
type LoginUserRequestBody struct {
	// Username for login
	Username string `form:"username" json:"username" xml:"username"`
	// Password for login
	Password string `form:"password" json:"password" xml:"password"`
}

// CreateProductRequestBody is the type of the "store" service "createProduct"
// endpoint HTTP request body.
type CreateProductRequestBody struct {
	// Product name
	Name string `form:"name" json:"name" xml:"name"`
	// Product description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Product price
	Price float64 `form:"price" json:"price" xml:"price"`
	// Available inventory
	Inventory int `form:"inventory" json:"inventory" xml:"inventory"`
}

// CreateOrderRequestBody is the type of the "store" service "createOrder"
// endpoint HTTP request body.
type CreateOrderRequestBody struct {
	// ID of the user placing the order
	UserID string `form:"userID" json:"userID" xml:"userID"`
	// Items in the order
	Items []*OrderItemRequestBody `form:"items" json:"items" xml:"items"`
}

// AddToCartRequestBody is the type of the "store" service "addToCart" endpoint
// HTTP request body.
type AddToCartRequestBody struct {
	// ID of the user who owns the cart
	UserID string `form:"userID" json:"userID" xml:"userID"`
	// ID of the product
	ProductID string `form:"productID" json:"productID" xml:"productID"`
	// Quantity of the product
	Quantity int `form:"quantity" json:"quantity" xml:"quantity"`
	// Price of the product
	Price *float64 `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
}

// GetCartRequestBody is the type of the "store" service "getCart" endpoint
// HTTP request body.
type GetCartRequestBody struct {
	// ID of the user whose cart to retrieve
	UserID string `form:"userID" json:"userID" xml:"userID"`
}

// CreateUserResponseBody is the type of the "store" service "createUser"
// endpoint HTTP response body.
type CreateUserResponseBody struct {
	// Unique user ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// User's username
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// User's email address
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User's first name
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty" xml:"firstName,omitempty"`
	// User's last name
	LastName *string `form:"lastName,omitempty" json:"lastName,omitempty" xml:"lastName,omitempty"`
	// User's password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// LoginUserResponseBody is the type of the "store" service "loginUser"
// endpoint HTTP response body.
type LoginUserResponseBody struct {
	// JWT token for the authenticated user
	Token *string `form:"token,omitempty" json:"token,omitempty" xml:"token,omitempty"`
}

// GetUserResponseBody is the type of the "store" service "getUser" endpoint
// HTTP response body.
type GetUserResponseBody struct {
	// Unique user ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// User's username
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// User's email address
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User's first name
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty" xml:"firstName,omitempty"`
	// User's last name
	LastName *string `form:"lastName,omitempty" json:"lastName,omitempty" xml:"lastName,omitempty"`
	// User's password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// GetUserAllResponseBody is the type of the "store" service "getUserAll"
// endpoint HTTP response body.
type GetUserAllResponseBody []*UserResponse

// CreateProductResponseBody is the type of the "store" service "createProduct"
// endpoint HTTP response body.
type CreateProductResponseBody struct {
	// Unique product ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Product name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Product description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Product price
	Price *float64 `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	// Available inventory
	Inventory *int `form:"inventory,omitempty" json:"inventory,omitempty" xml:"inventory,omitempty"`
}

// GetProductResponseBody is the type of the "store" service "getProduct"
// endpoint HTTP response body.
type GetProductResponseBody struct {
	// Unique product ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Product name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Product description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Product price
	Price *float64 `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	// Available inventory
	Inventory *int `form:"inventory,omitempty" json:"inventory,omitempty" xml:"inventory,omitempty"`
}

// ListProductsResponseBody is the type of the "store" service "listProducts"
// endpoint HTTP response body.
type ListProductsResponseBody []*ProductResponse

// CreateOrderResponseBody is the type of the "store" service "createOrder"
// endpoint HTTP response body.
type CreateOrderResponseBody struct {
	// Unique order ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// ID of the user who placed the order
	UserID *string `form:"userID,omitempty" json:"userID,omitempty" xml:"userID,omitempty"`
	// Items in the order
	Items []*OrderItemResponseBody `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	// Total amount of the order
	TotalAmount *float64 `form:"totalAmount,omitempty" json:"totalAmount,omitempty" xml:"totalAmount,omitempty"`
	// Order status
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// GetOrderResponseBody is the type of the "store" service "getOrder" endpoint
// HTTP response body.
type GetOrderResponseBody struct {
	// Unique order ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// ID of the user who placed the order
	UserID *string `form:"userID,omitempty" json:"userID,omitempty" xml:"userID,omitempty"`
	// Items in the order
	Items []*OrderItemResponseBody `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	// Total amount of the order
	TotalAmount *float64 `form:"totalAmount,omitempty" json:"totalAmount,omitempty" xml:"totalAmount,omitempty"`
	// Order status
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// GetUserOrdersResponseBody is the type of the "store" service "getUserOrders"
// endpoint HTTP response body.
type GetUserOrdersResponseBody []*OrderResponse

// AddToCartResponseBody is the type of the "store" service "addToCart"
// endpoint HTTP response body.
type AddToCartResponseBody struct {
	// Unique cart ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// ID of the user who owns the cart
	UserID *string `form:"userID,omitempty" json:"userID,omitempty" xml:"userID,omitempty"`
	// Items in the cart
	Items []*CartItemResponseBody `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	// Total amount of items in the cart
	TotalAmount *float64 `form:"totalAmount,omitempty" json:"totalAmount,omitempty" xml:"totalAmount,omitempty"`
}

// GetCartResponseBody is the type of the "store" service "getCart" endpoint
// HTTP response body.
type GetCartResponseBody struct {
	// Unique cart ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// ID of the user who owns the cart
	UserID *string `form:"userID,omitempty" json:"userID,omitempty" xml:"userID,omitempty"`
	// Items in the cart
	Items []*CartItemResponseBody `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	// Total amount of items in the cart
	TotalAmount *float64 `form:"totalAmount,omitempty" json:"totalAmount,omitempty" xml:"totalAmount,omitempty"`
}

// GetUserNotFoundResponseBody is the type of the "store" service "getUser"
// endpoint HTTP response body for the "not-found" error.
type GetUserNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetProductNotFoundResponseBody is the type of the "store" service
// "getProduct" endpoint HTTP response body for the "not-found" error.
type GetProductNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetOrderNotFoundResponseBody is the type of the "store" service "getOrder"
// endpoint HTTP response body for the "not-found" error.
type GetOrderNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetUserOrdersNotFoundResponseBody is the type of the "store" service
// "getUserOrders" endpoint HTTP response body for the "not-found" error.
type GetUserOrdersNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetCartNotFoundResponseBody is the type of the "store" service "getCart"
// endpoint HTTP response body for the "not-found" error.
type GetCartNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UserResponse is used to define fields on response body types.
type UserResponse struct {
	// Unique user ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// User's username
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// User's email address
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User's first name
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty" xml:"firstName,omitempty"`
	// User's last name
	LastName *string `form:"lastName,omitempty" json:"lastName,omitempty" xml:"lastName,omitempty"`
	// User's password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// ProductResponse is used to define fields on response body types.
type ProductResponse struct {
	// Unique product ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Product name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Product description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Product price
	Price *float64 `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	// Available inventory
	Inventory *int `form:"inventory,omitempty" json:"inventory,omitempty" xml:"inventory,omitempty"`
}

// OrderItemRequestBody is used to define fields on request body types.
type OrderItemRequestBody struct {
	// ID of the product
	ProductID string `form:"productID" json:"productID" xml:"productID"`
	// Quantity of the product
	Quantity int `form:"quantity" json:"quantity" xml:"quantity"`
	// Price of the product at the time of order
	Price float64 `form:"price" json:"price" xml:"price"`
}

// OrderItemResponseBody is used to define fields on response body types.
type OrderItemResponseBody struct {
	// ID of the product
	ProductID *string `form:"productID,omitempty" json:"productID,omitempty" xml:"productID,omitempty"`
	// Quantity of the product
	Quantity *int `form:"quantity,omitempty" json:"quantity,omitempty" xml:"quantity,omitempty"`
	// Price of the product at the time of order
	Price *float64 `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
}

// OrderResponse is used to define fields on response body types.
type OrderResponse struct {
	// Unique order ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// ID of the user who placed the order
	UserID *string `form:"userID,omitempty" json:"userID,omitempty" xml:"userID,omitempty"`
	// Items in the order
	Items []*OrderItemResponse `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	// Total amount of the order
	TotalAmount *float64 `form:"totalAmount,omitempty" json:"totalAmount,omitempty" xml:"totalAmount,omitempty"`
	// Order status
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// OrderItemResponse is used to define fields on response body types.
type OrderItemResponse struct {
	// ID of the product
	ProductID *string `form:"productID,omitempty" json:"productID,omitempty" xml:"productID,omitempty"`
	// Quantity of the product
	Quantity *int `form:"quantity,omitempty" json:"quantity,omitempty" xml:"quantity,omitempty"`
	// Price of the product at the time of order
	Price *float64 `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
}

// CartItemResponseBody is used to define fields on response body types.
type CartItemResponseBody struct {
	// ID of the user who owns the cart
	UserID *string `form:"userID,omitempty" json:"userID,omitempty" xml:"userID,omitempty"`
	// ID of the product
	ProductID *string `form:"productID,omitempty" json:"productID,omitempty" xml:"productID,omitempty"`
	// Quantity of the product
	Quantity *int `form:"quantity,omitempty" json:"quantity,omitempty" xml:"quantity,omitempty"`
	// Price of the product
	Price *float64 `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
}

// NewCreateUserRequestBody builds the HTTP request body from the payload of
// the "createUser" endpoint of the "store" service.
func NewCreateUserRequestBody(p *store.NewUser) *CreateUserRequestBody {
	body := &CreateUserRequestBody{
		Username:  p.Username,
		Email:     p.Email,
		FirstName: p.FirstName,
		LastName:  p.LastName,
		Password:  p.Password,
	}
	return body
}

// NewLoginUserRequestBody builds the HTTP request body from the payload of the
// "loginUser" endpoint of the "store" service.
func NewLoginUserRequestBody(p *store.LoginUserPayload) *LoginUserRequestBody {
	body := &LoginUserRequestBody{
		Username: p.Username,
		Password: p.Password,
	}
	return body
}

// NewCreateProductRequestBody builds the HTTP request body from the payload of
// the "createProduct" endpoint of the "store" service.
func NewCreateProductRequestBody(p *store.NewProduct) *CreateProductRequestBody {
	body := &CreateProductRequestBody{
		Name:        p.Name,
		Description: p.Description,
		Price:       p.Price,
		Inventory:   p.Inventory,
	}
	return body
}

// NewCreateOrderRequestBody builds the HTTP request body from the payload of
// the "createOrder" endpoint of the "store" service.
func NewCreateOrderRequestBody(p *store.NewOrder) *CreateOrderRequestBody {
	body := &CreateOrderRequestBody{
		UserID: p.UserID,
	}
	if p.Items != nil {
		body.Items = make([]*OrderItemRequestBody, len(p.Items))
		for i, val := range p.Items {
			body.Items[i] = marshalStoreOrderItemToOrderItemRequestBody(val)
		}
	} else {
		body.Items = []*OrderItemRequestBody{}
	}
	return body
}

// NewAddToCartRequestBody builds the HTTP request body from the payload of the
// "addToCart" endpoint of the "store" service.
func NewAddToCartRequestBody(p *store.CartItem) *AddToCartRequestBody {
	body := &AddToCartRequestBody{
		UserID:    p.UserID,
		ProductID: p.ProductID,
		Quantity:  p.Quantity,
		Price:     p.Price,
	}
	return body
}

// NewGetCartRequestBody builds the HTTP request body from the payload of the
// "getCart" endpoint of the "store" service.
func NewGetCartRequestBody(p *store.GetCartPayload) *GetCartRequestBody {
	body := &GetCartRequestBody{
		UserID: p.UserID,
	}
	return body
}

// NewCreateUserUserCreated builds a "store" service "createUser" endpoint
// result from a HTTP "Created" response.
func NewCreateUserUserCreated(body *CreateUserResponseBody) *store.User {
	v := &store.User{
		ID:        *body.ID,
		Username:  *body.Username,
		Email:     *body.Email,
		FirstName: body.FirstName,
		LastName:  body.LastName,
		Password:  body.Password,
	}

	return v
}

// NewLoginUserResultOK builds a "store" service "loginUser" endpoint result
// from a HTTP "OK" response.
func NewLoginUserResultOK(body *LoginUserResponseBody) *store.LoginUserResult {
	v := &store.LoginUserResult{
		Token: body.Token,
	}

	return v
}

// NewLoginUserUnauthorized builds a store service loginUser endpoint
// unauthorized error.
func NewLoginUserUnauthorized(body string) store.Unauthorized {
	v := store.Unauthorized(body)

	return v
}

// NewGetUserUserOK builds a "store" service "getUser" endpoint result from a
// HTTP "OK" response.
func NewGetUserUserOK(body *GetUserResponseBody) *store.User {
	v := &store.User{
		ID:        *body.ID,
		Username:  *body.Username,
		Email:     *body.Email,
		FirstName: body.FirstName,
		LastName:  body.LastName,
		Password:  body.Password,
	}

	return v
}

// NewGetUserNotFound builds a store service getUser endpoint not-found error.
func NewGetUserNotFound(body *GetUserNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetUserAllUserOK builds a "store" service "getUserAll" endpoint result
// from a HTTP "OK" response.
func NewGetUserAllUserOK(body []*UserResponse) []*store.User {
	v := make([]*store.User, len(body))
	for i, val := range body {
		v[i] = unmarshalUserResponseToStoreUser(val)
	}

	return v
}

// NewCreateProductProductCreated builds a "store" service "createProduct"
// endpoint result from a HTTP "Created" response.
func NewCreateProductProductCreated(body *CreateProductResponseBody) *store.Product {
	v := &store.Product{
		ID:          *body.ID,
		Name:        *body.Name,
		Description: body.Description,
		Price:       *body.Price,
		Inventory:   *body.Inventory,
	}

	return v
}

// NewGetProductProductOK builds a "store" service "getProduct" endpoint result
// from a HTTP "OK" response.
func NewGetProductProductOK(body *GetProductResponseBody) *store.Product {
	v := &store.Product{
		ID:          *body.ID,
		Name:        *body.Name,
		Description: body.Description,
		Price:       *body.Price,
		Inventory:   *body.Inventory,
	}

	return v
}

// NewGetProductNotFound builds a store service getProduct endpoint not-found
// error.
func NewGetProductNotFound(body *GetProductNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListProductsProductOK builds a "store" service "listProducts" endpoint
// result from a HTTP "OK" response.
func NewListProductsProductOK(body []*ProductResponse) []*store.Product {
	v := make([]*store.Product, len(body))
	for i, val := range body {
		v[i] = unmarshalProductResponseToStoreProduct(val)
	}

	return v
}

// NewCreateOrderOrderCreated builds a "store" service "createOrder" endpoint
// result from a HTTP "Created" response.
func NewCreateOrderOrderCreated(body *CreateOrderResponseBody) *store.Order {
	v := &store.Order{
		ID:          *body.ID,
		UserID:      *body.UserID,
		TotalAmount: *body.TotalAmount,
		Status:      *body.Status,
	}
	v.Items = make([]*store.OrderItem, len(body.Items))
	for i, val := range body.Items {
		v.Items[i] = unmarshalOrderItemResponseBodyToStoreOrderItem(val)
	}

	return v
}

// NewGetOrderOrderOK builds a "store" service "getOrder" endpoint result from
// a HTTP "OK" response.
func NewGetOrderOrderOK(body *GetOrderResponseBody) *store.Order {
	v := &store.Order{
		ID:          *body.ID,
		UserID:      *body.UserID,
		TotalAmount: *body.TotalAmount,
		Status:      *body.Status,
	}
	v.Items = make([]*store.OrderItem, len(body.Items))
	for i, val := range body.Items {
		v.Items[i] = unmarshalOrderItemResponseBodyToStoreOrderItem(val)
	}

	return v
}

// NewGetOrderNotFound builds a store service getOrder endpoint not-found error.
func NewGetOrderNotFound(body *GetOrderNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetUserOrdersOrderOK builds a "store" service "getUserOrders" endpoint
// result from a HTTP "OK" response.
func NewGetUserOrdersOrderOK(body []*OrderResponse) []*store.Order {
	v := make([]*store.Order, len(body))
	for i, val := range body {
		v[i] = unmarshalOrderResponseToStoreOrder(val)
	}

	return v
}

// NewGetUserOrdersNotFound builds a store service getUserOrders endpoint
// not-found error.
func NewGetUserOrdersNotFound(body *GetUserOrdersNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewAddToCartCartOK builds a "store" service "addToCart" endpoint result from
// a HTTP "OK" response.
func NewAddToCartCartOK(body *AddToCartResponseBody) *store.Cart {
	v := &store.Cart{
		ID:          *body.ID,
		UserID:      *body.UserID,
		TotalAmount: *body.TotalAmount,
	}
	v.Items = make([]*store.CartItem, len(body.Items))
	for i, val := range body.Items {
		v.Items[i] = unmarshalCartItemResponseBodyToStoreCartItem(val)
	}

	return v
}

// NewGetCartCartOK builds a "store" service "getCart" endpoint result from a
// HTTP "OK" response.
func NewGetCartCartOK(body *GetCartResponseBody) *store.Cart {
	v := &store.Cart{
		ID:          *body.ID,
		UserID:      *body.UserID,
		TotalAmount: *body.TotalAmount,
	}
	v.Items = make([]*store.CartItem, len(body.Items))
	for i, val := range body.Items {
		v.Items[i] = unmarshalCartItemResponseBodyToStoreCartItem(val)
	}

	return v
}

// NewGetCartNotFound builds a store service getCart endpoint not-found error.
func NewGetCartNotFound(body *GetCartNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateCreateUserResponseBody runs the validations defined on
// CreateUserResponseBody
func ValidateCreateUserResponseBody(body *CreateUserResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	return
}

// ValidateGetUserResponseBody runs the validations defined on
// GetUserResponseBody
func ValidateGetUserResponseBody(body *GetUserResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	return
}

// ValidateCreateProductResponseBody runs the validations defined on
// CreateProductResponseBody
func ValidateCreateProductResponseBody(body *CreateProductResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	if body.Inventory == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("inventory", "body"))
	}
	return
}

// ValidateGetProductResponseBody runs the validations defined on
// GetProductResponseBody
func ValidateGetProductResponseBody(body *GetProductResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	if body.Inventory == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("inventory", "body"))
	}
	return
}

// ValidateCreateOrderResponseBody runs the validations defined on
// CreateOrderResponseBody
func ValidateCreateOrderResponseBody(body *CreateOrderResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("userID", "body"))
	}
	if body.Items == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("items", "body"))
	}
	if body.TotalAmount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("totalAmount", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	for _, e := range body.Items {
		if e != nil {
			if err2 := ValidateOrderItemResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGetOrderResponseBody runs the validations defined on
// GetOrderResponseBody
func ValidateGetOrderResponseBody(body *GetOrderResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("userID", "body"))
	}
	if body.Items == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("items", "body"))
	}
	if body.TotalAmount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("totalAmount", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	for _, e := range body.Items {
		if e != nil {
			if err2 := ValidateOrderItemResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateAddToCartResponseBody runs the validations defined on
// AddToCartResponseBody
func ValidateAddToCartResponseBody(body *AddToCartResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("userID", "body"))
	}
	if body.Items == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("items", "body"))
	}
	if body.TotalAmount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("totalAmount", "body"))
	}
	for _, e := range body.Items {
		if e != nil {
			if err2 := ValidateCartItemResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGetCartResponseBody runs the validations defined on
// GetCartResponseBody
func ValidateGetCartResponseBody(body *GetCartResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("userID", "body"))
	}
	if body.Items == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("items", "body"))
	}
	if body.TotalAmount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("totalAmount", "body"))
	}
	for _, e := range body.Items {
		if e != nil {
			if err2 := ValidateCartItemResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGetUserNotFoundResponseBody runs the validations defined on
// getUser_not-found_response_body
func ValidateGetUserNotFoundResponseBody(body *GetUserNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetProductNotFoundResponseBody runs the validations defined on
// getProduct_not-found_response_body
func ValidateGetProductNotFoundResponseBody(body *GetProductNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetOrderNotFoundResponseBody runs the validations defined on
// getOrder_not-found_response_body
func ValidateGetOrderNotFoundResponseBody(body *GetOrderNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetUserOrdersNotFoundResponseBody runs the validations defined on
// getUserOrders_not-found_response_body
func ValidateGetUserOrdersNotFoundResponseBody(body *GetUserOrdersNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetCartNotFoundResponseBody runs the validations defined on
// getCart_not-found_response_body
func ValidateGetCartNotFoundResponseBody(body *GetCartNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUserResponse runs the validations defined on UserResponse
func ValidateUserResponse(body *UserResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	return
}

// ValidateProductResponse runs the validations defined on ProductResponse
func ValidateProductResponse(body *ProductResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	if body.Inventory == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("inventory", "body"))
	}
	return
}

// ValidateOrderItemResponseBody runs the validations defined on
// OrderItemResponseBody
func ValidateOrderItemResponseBody(body *OrderItemResponseBody) (err error) {
	if body.ProductID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("productID", "body"))
	}
	if body.Quantity == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("quantity", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	return
}

// ValidateOrderResponse runs the validations defined on OrderResponse
func ValidateOrderResponse(body *OrderResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("userID", "body"))
	}
	if body.Items == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("items", "body"))
	}
	if body.TotalAmount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("totalAmount", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	for _, e := range body.Items {
		if e != nil {
			if err2 := ValidateOrderItemResponse(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateOrderItemResponse runs the validations defined on OrderItemResponse
func ValidateOrderItemResponse(body *OrderItemResponse) (err error) {
	if body.ProductID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("productID", "body"))
	}
	if body.Quantity == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("quantity", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	return
}

// ValidateCartItemResponseBody runs the validations defined on
// CartItemResponseBody
func ValidateCartItemResponseBody(body *CartItemResponseBody) (err error) {
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("userID", "body"))
	}
	if body.ProductID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("productID", "body"))
	}
	if body.Quantity == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("quantity", "body"))
	}
	return
}
